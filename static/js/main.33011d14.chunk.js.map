{"version":3,"sources":["actions/index.js","reducers/app.js","data/evidences.js","data/ghosts.js","utils/index.js","reducers/picker.js","data/quests.js","reducers/index.js","firebase.js","services/firebaseData.js","selectors/index.js","sagas/index.js","store.js","components/Picker/Buttons/styles.js","components/Picker/Buttons/CustomButton.jsx","components/Picker/GhostCard/styles.js","components/Picker/GhostCard/index.jsx","components/Picker/styles.js","components/Picker/index.jsx","components/Questions/styles.js","components/Questions/index.jsx","components/Login/styles.js","components/Login/index.jsx","components/theme.js","components/App.jsx","index.jsx"],"names":["enterApp","page","sessionId","type","setSessionKey","sessionKey","setClientId","clientId","setPickerState","data","key","defaultState","app","state","action","EMF","ghosts","name","evidences","strength","weakness","cookies","Cookies","filterGhostsByEvidences","filter","ghost","difference","length","getCurrentTimestamp","Date","now","getSessionById","id","objects","find","el","selectedEvidences","evidenceButtons","questButtons","talksToEveryOne","ghostName","picker","evidence","isActive","updatedButtonsState","push","filteredGhosts","remove","quest","get","combineReducers","firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","database","ref","orderByChild","equalTo","once","session","value","child","update","sessionIdSelector","sessionKeySelector","clientIdSelector","pickerStateSelector","removeSession","handlePickerChange","rootSaga","createPickerStateObject","updatedAt","nanoid","call","firebaseDataService","val","Object","keys","clients","updateSession","put","select","objectToStore","createSession","newSessionKey","takeEvery","takeLatest","configureStore","sagaMiddleware","createSagaMiddleware","store","createStore","reducer","REACT_APP_ENV","composeWithDevTools","applyMiddleware","run","makeStyles","button","color","props","margin","buttonSelected","border","CustomButton","text","handleClick","css","useStyles","useSelector","isActiveButtonSelector","Button","className","onClick","root","width","padding","content","display","alignItems","accent","header","GhostCard","useState","isOpen","setIsOpen","useEffect","Fade","in","timeout","Box","Typography","variant","map","includes","palette","wrapper","flexDirection","justifyContent","minHeight","background","primary","main","contrastText","inputWrapper","flexWrap","evidencesButtonsWrapper","ghostsWrapper","alignContent","noEvidenceWrapper","marginTop","sessionControls","height","position","zIndex","sessionIdWrapper","marginRight","Picker","changePage","resetSession","dispatch","useDispatch","pickerState","handleEvidenceButtonClick","filterGhosts","handleQuestButtonClick","updateSelectedQuests","Slide","direction","mountOnEnter","unmountOnExit","Tooltip","title","IconButton","TextField","label","onChange","e","target","updateGhostName","updateAnswersEveryoneButton","isEmpty","overflowX","changePageButtonWrapper","paddingBottom","icon","pageLabel","questionsWrapper","columnWrapper","Questions","questions","submitButton","Login","changeSessionId","error","setError","sessionIdCookie","noValidate","autoComplete","helperText","preventDefault","sessionIdNormalized","replace","test","set","maxAge","setSessionId","createMuiTheme","grey","secondary","overrides","MuiTypography","body1","fontFamily","h3","h4","h5","h6","App","pageSelector","onAppExit","window","addEventListener","removeEventListener","getRef","on","handleChangePage","newPage","handleSessionReset","ThemeProvider","theme","renderPage","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kQACaA,EAAW,SAACC,EAAMC,GAAP,MAAsB,CAC5CC,KAFuB,YAGvBF,OACAC,cAIWE,EAAgB,SAACC,GAAD,MAAiB,CAC5CF,KAF6B,kBAG7BE,eAIWC,EAAc,SAACC,GAAD,MAAe,CACxCJ,KAF2B,gBAG3BI,aA6CWC,EAAiB,SAACC,EAAMC,GAAP,MAAgB,CAC5CP,KAF8B,mBAG9BM,OACAC,QC3DIC,EAAe,CACnBV,KAAM,GACNC,UAAW,GACXG,WAAY,KACZE,SAAU,MAkDGK,EA/CH,WAAmC,IAAlCC,EAAiC,uDAAzBF,EAAcG,EAAW,uCAC5C,OAAQA,EAAOX,MACb,IDWuB,cCXJ,IACTF,EAASa,EAATb,KAER,OAAO,eACFY,EADL,CAEEZ,SAIJ,IDvBqB,YCuBJ,IACPA,EAAoBa,EAApBb,KAAMC,EAAcY,EAAdZ,UAEd,MAAQ,CACND,OACAC,aAIJ,IDnByB,gBCmBJ,IACXK,EAAaO,EAAbP,SAER,OAAO,eACFM,EADL,CAEEN,aAIJ,IDnBkC,yBCoBhC,OAAOI,EAGT,IDtC2B,kBCsCJ,IACbN,EAAeS,EAAfT,WAER,OAAO,eACFQ,EADL,CAEER,eAIJ,QACE,OAAOQ,I,gBCvDAE,EAAM,MC2FJC,EAtFA,CACb,CACEC,KAAM,UACNC,UAAW,CAACH,EDPY,eACD,eCOvBI,SAAU,oCACVC,SAAU,sBAGZ,CACEH,KAAM,QACNC,UAAW,CDbY,cACE,gBACH,cCYtBC,SAAU,uBACVC,SAAU,gEAGZ,CACEH,KAAM,OACNC,UAAW,CAACH,EDlBU,aACD,aCkBrBI,SAAU,gDACVC,SAAU,iFAGZ,CACEH,KAAM,OACNC,UAAW,CD3BY,cAED,aACD,aCyBrBC,SAAU,kEACVC,SAAU,yBAGZ,CACEH,KAAM,MACNC,UAAW,CAACH,EDjCa,gBACH,cCiCtBI,SAAU,6CACVC,SAAU,0EAGZ,CACEH,KAAM,UACNC,UAAW,CAACH,EDzCW,cAGF,aCuCrBI,SAAU,iDACVC,SAAU,mEAGZ,CACEH,KAAM,cACNC,UAAW,CDjDa,eAGF,aACD,aC8CrBC,SAAU,wCACVC,SAAU,uCAGZ,CACEH,KAAM,WACNC,UAAW,CAACH,EDxDY,eAEC,iBCuDzBI,SAAU,8CACVC,SAAU,4CAGZ,CACEH,KAAM,QACNC,UAAW,CAACH,ED7Da,gBAEJ,aC4DrBI,SAAU,4CACVC,SAAU,2CAGZ,CACEH,KAAM,SACNC,UAAW,CDtEa,eAEC,gBACH,cCoEtBC,SAAU,eACVC,SAAU,2DAGZ,CACEH,KAAM,SACNC,UAAW,CD7Ea,eACD,cAED,cC2EtBC,SAAU,sDACVC,SAAU,4BAGZ,CACEH,KAAM,QACNC,UAAW,CDnFY,cACE,gBAEJ,aCiFrBC,SAAU,0CACVC,SAAU,kECpFRC,EAAU,I,MAAIC,GAEPC,EAA0B,SAACP,EAAQE,GAAT,OACrCM,iBAAOR,GAAQ,SAACS,GAAD,OAA6D,IAAlDC,qBAAWR,EAAWO,EAAMP,WAAWS,WAWtDC,EAAsB,kBAAMC,KAAKC,OAEjCC,EAAiB,SAACC,EAAIC,GAAL,OAC5BC,eAAKD,GAAS,SAACE,GAAD,OAAQA,EAAGjC,YAAc8B,MAAO,ICE1CrB,EAAe,CACnByB,kBAAmB,GACnBpB,SACAqB,iBAAe,mBACZtB,GAAM,GADM,cHxBW,gBG0BR,GAFH,cHvBU,eG0BR,GAHF,cHtBY,iBG0BR,GAJJ,cHrBS,cG0BR,GALD,cHpBQ,aG0BR,GANA,GAQfuB,cAAY,mBCjCM,QDkCR,GADE,cChCO,SDkCR,GAFC,cC9BQ,UDiCR,GAHA,cC7Ba,eDiCF,GAJX,cC5BU,YDiCR,GALF,cC3BK,ODiCF,GANH,cC1BQ,UDiCR,GAPA,cC/BO,SDuCR,GARC,GAUZC,iBAAiB,EACjBC,UAAW,IA6FEC,EA1FA,WAAmC,IAAlC5B,EAAiC,uDAAzBF,EAAcG,EAAW,uCAC/C,OAAQA,EAAOX,MACb,ILlByB,gBKkBJ,IACXuC,EAAuB5B,EAAvB4B,SAAUC,EAAa7B,EAAb6B,SACVP,EAAsBvB,EAAtBuB,kBAEFQ,EAAmB,eACpB/B,EAAMwB,gBADc,eAEtBK,EAAWC,IAGd,GAAIA,EAAU,CACZP,EAAkBS,KAAKH,GAEvB,IAAMI,EAAiBvB,EAAwBP,EAAQoB,GAEvD,OAAO,eACFvB,EADL,CAEEG,OAAQ8B,EACRV,oBACAC,gBAAiBO,IAIrBG,iBAAOX,GAAmB,SAACD,GAAD,OAAQA,IAAOO,KAEzC,IAAMI,EAAiBvB,EAAwBP,EAAQoB,GAEvD,OAAO,eACFvB,EADL,CAEEG,OAAQ8B,EACRV,oBACAC,gBAAiBO,IAIrB,ILtC6B,oBKsCJ,IACf3B,EAASH,EAATG,KAER,OAAO,eACFJ,EADL,CAEE2B,UAAWvB,IAIf,ILtDkC,yBKsDJ,IACpB+B,EAAoBlC,EAApBkC,MAAOL,EAAa7B,EAAb6B,SAEf,OAAO,eACF9B,EADL,CAEEyB,aAAa,eACRzB,EAAMyB,aADC,eAETU,EAAQL,MAKf,ILrD0C,iCKqDJ,IAC5BA,EAAa7B,EAAb6B,SAER,OAAO,eACF9B,EADL,CAEE0B,gBAAiBI,IAIrB,ILxDwB,eKyDtB,OAAO,eACFhC,EADL,CAEEyB,kBAAmB,KAIvB,IL5D4B,mBK4DJ,IACd3B,EAASK,EAATL,KACF2B,EAAoBa,cAAIxC,EAAM,oBAAqB,IAEzD,OAAO,eACFI,EADL,GAEKJ,EAFL,CAGE2B,oBACApB,OAAQO,EAAwBP,EAAQoB,KAI5C,QACE,OAAOvB,IEhIEqC,4BAAgB,CAC7BtC,MACA6B,W,gECMFU,IAASC,cAVM,CACbC,OAAQC,0CACRC,WAAYD,+BACZE,YAAaF,sCACbG,UAAWH,eACXI,cAAeJ,2BACfK,kBAAmBL,eACnBM,MAAON,8CAKMH,UAASU,WCYT,M,uGAxBE3D,GACb,OAAOiD,EAASW,MACbC,aAAa,aACbC,QAAQ9D,GACR+D,KAAK,W,oCAGIC,GACZ,OAAOf,EAASW,MAAMjB,KAAKqB,K,oCAGfxD,EAAKyD,GACjB,OAAOhB,EAASW,MAAMM,MAAM1D,GAAK2D,OAAOF,K,oCAG5BzD,GACZ,OAAOyC,EAASW,MAAMM,MAAM1D,GAAKqC,W,+BAIjC,OAAOI,EAASW,U,MCrBPQ,EAAoB,SAACzD,GAAD,OAAWA,EAAMD,IAAIV,WAEzCqE,EAAqB,SAAC1D,GAAD,OAAWA,EAAMD,IAAIP,YAE1CmE,EAAmB,SAAC3D,GAAD,OAAWA,EAAMD,IAAIL,UA0BxCkE,EAAsB,SAAC5D,GAAD,OAAWA,EAAM4B,Q,WCO1CzC,G,WA2CA0E,G,WA8BAC,G,WAkBAC,GA5GJC,EAA0B,SAACpC,EAAQvC,GAMvC,MAAO,CACLA,YACAkC,kBAJEK,EAFFL,kBAOAC,gBALEI,EAFiBJ,gBAQnBC,aANEG,EAFkCH,aASpCC,gBAPEE,EADFF,gBASAC,UAREC,EADeD,UAUjBsC,UAAWlD,MAIf,SAAU5B,EAASc,GAAnB,0FACUZ,EAAcY,EAAdZ,UACFK,EAAWwE,YAAO,IAEN,KAAd7E,EAJN,iBAKiB,OALjB,SAKuB8E,YAAKC,EAAoBlD,eAAgB7B,GALhE,UAKUO,EALV,SAMUyD,EAAUnC,EAAe7B,EAAWO,EAAKyE,QANnD,iBAaM,OAJMxE,EAAMyE,OAAOC,KAAK3E,EAAKyE,OAAO,IAC9BG,EAAUpC,cAAIiB,EAAS,UAAW,KAChCrB,KAAKtC,GAXnB,UAaYyE,YACJC,EAAoBK,cACpB5E,EAFQ,eAIHwD,EAJG,CAKNmB,UACAP,UAAWlD,OAnBrB,QAuBM,OAvBN,UAuBY2D,YAAI/E,EAAe0D,IAvB/B,QAwBM,OAxBN,UAwBYqB,YAAInF,EAAcM,IAxB9B,gCA0BqB,OA1BrB,UA0B2B8E,YAAOf,GA1BlC,QA6B4B,OAHhBhC,EA1BZ,OA2BYgD,EAAgBZ,EAAwBpC,EAAQvC,GA3B5D,UA6BkC8E,YAC1BC,EAAoBS,cADU,eAGzBD,EAHyB,CAI5BJ,QAAS,CAAC9E,MAjCpB,QAoCM,OAPMoF,EA7BZ,iBAoCYJ,YAAInF,EAAcuF,EAAcjF,MApC5C,QAuCI,OAvCJ,UAuCU6E,YAAIjF,EAAYC,IAvC1B,wCA2CA,SAAUmE,IAAV,iFACoB,OADpB,SAC0Bc,YAAOlB,GADjC,OAEmB,OADXpE,EADR,gBAEyBsF,YAAOhB,GAFhC,OAGc,OADNjE,EAFR,gBAGoBiF,YAAOjB,GAH3B,OAKe,OAFP7D,EAHR,iBAKqBsE,YAAKC,EAAoBlD,eAAgB7B,GAL9D,WAKQO,EALR,OAMQyD,EAAUnC,EAAe7B,EAAWO,EAAKyE,OAIxB,KAFjBG,EAAUpC,cAAIiB,EAAS,UAAW,KAE5BvC,OAVd,iBAWI,OAXJ,UAWUqD,YAAKC,EAAoBP,cAAehE,GAXlD,gCAeI,OAFAqC,iBAAOsC,GAAS,SAAClD,GAAD,OAAQA,IAAO5B,KAbnC,UAeUyE,YACJC,EAAoBK,cACpB5E,EAFQ,eAIHwD,EAJG,CAKNmB,UACAP,UAAWlD,OArBnB,QA0BE,OA1BF,UA0BQ2D,YXrFmC,CAAEpF,KADP,2BW4DtC,QA2BE,OA3BF,UA2BQoF,YXnD0B,CAAEpF,KADR,iBWyB5B,wCA8BA,SAAUwE,IAAV,+EACqB,OADrB,SAC2Ba,YAAOjB,GADlC,OAEoB,OADZlE,EADR,gBAE0BmF,YAAOlB,GAFjC,OAGiB,OADTpE,EAFR,gBAGuBsF,YAAOf,GAH9B,UAGQhC,EAHR,OAKQgD,EAAgBZ,EAAwBpC,EAAQvC,IAElDG,GAA4B,KAAdH,EAPpB,iBAQI,OARJ,UAQU8E,YAAKC,EAAoBK,cAAejF,EAAYoF,GAR9D,6CAYOpF,KAAcH,EAAUyB,OAAS,GAZxC,iBAa0B,OAb1B,UAagCqD,YAAKC,EAAoBS,cAAeD,GAbxE,QAcI,OADME,EAbV,iBAcUJ,YAAInF,EAAcuF,EAAcjF,MAd1C,wCAkBA,SAAUkE,IAAV,iEACE,OADF,SACQgB,YXnIiB,YWmII5F,GAD7B,OAEE,OAFF,SAEQ4F,YXjHqB,gBWiHIlB,GAFjC,OAGE,OAHF,SAGQmB,YAAW,CXxFc,oBAPK,yBAaQ,iCApBjB,gBA0BD,gBWkFvBlB,GATL,uCAYeC,QCxHAkB,GAfQ,WACrB,IAAMC,EAAiBC,cAEjBC,EAAQC,sBACZC,EAC8B,QAA9B7C,wiBAAY8C,cACRC,8BAAoBC,0BAAgBP,IACpCO,0BAAgBP,IAKtB,OAFAA,EAAeQ,IAAI3B,GAEZqB,G,2ICjBMO,gBAAW,CACxBC,OAAQ,CACNC,MAAO,SAACC,GAAD,OAAWA,EAAMD,OACxBE,OAAQ,SAGVC,eAAgB,CACdH,MAAO,SAACC,GAAD,OAAWA,EAAMD,OACxBI,OAAQ,gBACRF,OAAQ,WCsBGG,GAvBM,SAAC,GAEf,IADL5G,EACI,EADJA,KAAM6G,EACF,EADEA,KAAMC,EACR,EADQA,YAAgBN,EACxB,8CACEO,EAAMC,GAAUR,GAEhBhE,EAAWyE,aAAY,SAACvG,GAAD,OJHO,SAACA,EAAOV,EAAMc,GAClD,OAAQd,GACN,IAAK,WACH,OAAOU,EAAM4B,OAAOJ,gBAAgBpB,GAGtC,IAAK,QACH,OAAOJ,EAAM4B,OAAOH,aAAarB,GAGnC,IAAK,kBACH,OAAOJ,EAAM4B,OAAOF,gBAGtB,QACE,OAAO,GIZ6B8E,CAAuBxG,EAAOV,EAAM6G,MAE5E,OACE,kBAACM,GAAA,EAAD,CACEC,UAAW5E,EAAWuE,EAAIL,eAAiBK,EAAIT,OAC/Ce,QAAS,kBAAMP,EAAYD,GAAOrE,KAEjCqE,I,mBCpBQR,iBAAW,iBAAO,CAC/BiB,KAAM,CACJC,MAAO,IACPC,QAAS,IAGXC,QAAS,CACPC,QAAS,OACTC,WAAY,UAGdC,OAAQ,CACNrB,MAAO,SAGTsB,OAAQ,CACNtB,MAAO,WCsCIuB,GA/CG,SAAC,GAAiC,IAA/BxH,EAA8B,EAA9BA,KAAM2B,EAAwB,EAAxBA,kBAAwB,EACrB8F,oBAAS,GADY,oBAC1CC,EAD0C,KAClCC,EADkC,KAE3ClB,EAAMC,KAGVlG,EACER,EADFQ,KAAME,EACJV,EADIU,SAAUC,EACdX,EADcW,SAAUF,EACxBT,EADwBS,UAW5B,OARAmH,qBAAU,WAGR,OAFAD,GAAU,GAEF,WACNA,GAAU,MAEX,IAGD,kBAACE,GAAA,EAAD,CAAMC,GAAIJ,EAAQK,QAAS,KACzB,kBAACC,GAAA,EAAD,CAAKlB,UAAWL,EAAIO,MAClB,kBAACiB,GAAA,EAAD,CAAYC,QAAQ,KAAKpB,UAAWL,EAAIc,QAAS/G,GACjD,kBAACyH,GAAA,EAAD,CAAYC,QAAQ,KAAKjC,MAAM,aAA/B,aAEExF,EAAU0H,KAAI,SAACzG,GAAD,OACZ,kBAACsG,GAAA,EAAD,CAAK/H,IAAKyB,GACR,kBAACuG,GAAA,EAAD,CAAYnB,UAAWnF,EAAkByG,SAAS1G,GAAM+E,EAAIa,OAAS,IAAK5F,OAIhF,kBAACuG,GAAA,EAAD,CAAYC,QAAQ,MAApB,YACA,kBAACD,GAAA,EAAD,CAAYnB,UAAWL,EAAIU,SAAUzG,GACrC,kBAACuH,GAAA,EAAD,CAAYC,QAAQ,MAApB,YACA,kBAACD,GAAA,EAAD,CAAYnB,UAAWL,EAAIU,SAAUxG,MCtC9BoF,iBAAW,gBAAGsC,EAAH,EAAGA,QAAH,MAAkB,CAC1CC,QAAS,CACPlB,QAAS,OACTmB,cAAe,SACflB,WAAY,SACZmB,eAAgB,aAChBvB,MAAO,OACPwB,UAAW,OACXvB,QAAS,EACTwB,WAAYL,EAAQM,QAAQC,KAC5B3C,MAAOoC,EAAQM,QAAQE,cAGzBC,aAAc,CACZ1B,QAAS,OACToB,eAAgB,SAChBtB,QAAS,YACT6B,SAAU,QAGZC,wBAAyB,CACvB5B,QAAS,OACToB,eAAgB,SAChBnB,WAAY,SACZH,QAAS,UACT6B,SAAU,QAGZE,cAAe,CACb7B,QAAS,OACT2B,SAAU,OACVG,aAAc,SACdV,eAAgB,SAChBtB,QAAS,UAGXiC,kBAAmB,CACjBjC,QAAS,IAGXK,OAAQ,CACNN,MAAO,OACPG,QAAS,OACToB,eAAgB,SAChBY,UAAW,IAGbC,gBAAiB,CACfjC,QAAS,OACTkC,OAAQ,GACRrC,MAAO,OACPyB,WAAY,uBACZF,eAAgB,WAChBe,SAAU,QACVC,OAAQ,IAGVC,iBAAkB,CAChBrC,QAAS,OACTC,WAAY,SACZqC,YAAa,OCqFFC,GA/GA,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,WAAYC,EAAmB,EAAnBA,aACtBC,EAAWC,cACXtD,EAAMC,KAENsD,EAAcrD,aAAY,SAACvG,GAAD,OAAW4D,EAAoB5D,MACzDX,EAAYkH,aAAY,SAACvG,GAAD,OAAWyD,EAAkBzD,MAMrD6J,EAA4B,SAAChI,EAAUC,GAC3C4H,ElBhBwB,SAAC7H,EAAUC,GAAX,MAAyB,CACnDxC,KAF2B,gBAG3BuC,WACAC,YkBaWgI,CAAajI,EAAUC,KAG5BiI,EAAyB,SAAC5H,EAAOL,GACrC4H,ElBbgC,SAACvH,EAAOL,GAAR,MAAsB,CACxDxC,KAFoC,yBAGpC6C,QACAL,YkBUWkI,CAAqB7H,EAAOL,KAW/BH,EAAyCiI,EAAzCjI,UAAWxB,EAA8ByJ,EAA9BzJ,OAAQoB,EAAsBqI,EAAtBrI,kBAE3B,OACE,kBAAC0I,GAAA,EAAD,CAAOC,UAAU,QAAQxC,IAAE,EAACyC,cAAY,EAACC,eAAa,GACpD,kBAACxC,GAAA,EAAD,CAAKlB,UAAWL,EAAI6B,SAClB,kBAACN,GAAA,EAAD,CAAKlB,UAAWL,EAAI4C,iBAEF,KAAd5J,GACE,kBAACuI,GAAA,EAAD,CAAKlB,UAAWL,EAAIgD,kBAClB,kBAACxB,GAAA,EAAD,2BAA4BxI,KAIlC,kBAACgL,GAAA,EAAD,CAASC,MAAM,aACb,kBAACC,GAAA,EAAD,CAAY5D,QAAS,kBAAM8C,MACzB,kBAAC,KAAD,QAGJ,kBAACY,GAAA,EAAD,CAASC,MAAM,gBACb,kBAACC,GAAA,EAAD,CAAY5D,QAAS,kBAAM6C,EAAW,eACpC,kBAAC,KAAD,SAIN,kBAAC5B,GAAA,EAAD,CAAKlB,UAAWL,EAAIc,QAClB,kBAACU,GAAA,EAAD,CAAYC,QAAQ,MAApB,iBAEF,kBAACF,GAAA,EAAD,CAAKlB,UAAWL,EAAIqC,cAClB,kBAAC8B,GAAA,EAAD,CACErJ,GAAG,aACHsJ,MAAM,aACN3C,QAAQ,WACRxE,MAAO3B,EACP+I,SAAU,SAACC,GAAD,OArDWvK,EAqDkBuK,EAAEC,OAAOtH,WApDxDoG,ElBE2B,SAACtJ,GAAD,MAAW,CACxCd,KAF+B,oBAG/Bc,QkBJWyK,CAAgBzK,IADG,IAACA,KAuDvB,kBAAC,GAAD,CAAcd,KAAK,kBAAkBuG,MAAM,OAAOM,KAAK,mBAAmBC,YA3C9C,SAACD,EAAMrE,GACzC4H,ElBJuC,SAAC5H,GAAD,MAAe,CACxDxC,KAF4C,iCAG5CwC,YkBEWgJ,CAA4BhJ,OA2C/B,kBAAC,GAAD,CAAcxC,KAAK,QAAQuG,MAAM,OAAOM,KAAK,QAAQC,YAxCzC,WAClBsD,ElBF8B,CAAEpK,KADR,qBkB4CpB,kBAACuI,GAAA,EAAD,CAAYC,QAAQ,MAApB,aACA,kBAACF,GAAA,EAAD,CAAKlB,UAAWL,EAAIuC,yBAClB,kBAAC,GAAD,CAActJ,KAAK,WAAWuG,MAAM,MAAMM,KAAMjG,EAAKkG,YAAayD,IAClE,kBAAC,GAAD,CAAcvK,KAAK,WAAWuG,MAAM,QAAQM,KhBvG1B,egBuG8CC,YAAayD,IAC7E,kBAAC,GAAD,CAAcvK,KAAK,WAAWuG,MAAM,aAAaM,KhBvGhC,cgBuGmDC,YAAayD,IACjF,kBAAC,GAAD,CAAcvK,KAAK,WAAWuG,MAAM,SAASM,KhBvG1B,gBgBuG+CC,YAAayD,IAC/E,kBAAC,GAAD,CAAcvK,KAAK,WAAWuG,MAAM,YAAYM,KhBvGhC,agBuGkDC,YAAayD,IAC/E,kBAAC,GAAD,CAAcvK,KAAK,WAAWuG,MAAM,QAAQM,KhBvG7B,YgBuG8CC,YAAayD,KAE5E,kBAAChC,GAAA,EAAD,CAAYC,QAAQ,MAApB,UACA,kBAACF,GAAA,EAAD,CAAKlB,UAAWL,EAAIuC,yBAClB,kBAAC,GAAD,CAActJ,KAAK,QAAQuG,MAAM,OAAOM,KZ3G1B,WY2G0CC,YAAa2D,IACrE,kBAAC,GAAD,CAAczK,KAAK,QAAQuG,MAAM,OAAOM,KZ/G7B,QY+G0CC,YAAa2D,IAClE,kBAAC,GAAD,CAAczK,KAAK,QAAQuG,MAAM,OAAOM,KZ/G5B,SY+G0CC,YAAa2D,IACnE,kBAAC,GAAD,CAAczK,KAAK,QAAQuG,MAAM,OAAOM,KZlH7B,QYkH0CC,YAAa2D,IAClE,kBAAC,GAAD,CAAczK,KAAK,QAAQuG,MAAM,OAAOM,KZ9G/B,MY8GgDC,YAAa2D,IACtE,kBAAC,GAAD,CAAczK,KAAK,QAAQuG,MAAM,OAAOM,KZrH9B,OYqH0CC,YAAa2D,IACjE,kBAAC,GAAD,CAAczK,KAAK,QAAQuG,MAAM,OAAOM,KZ/G5B,SY+G0CC,YAAa2D,IACnE,kBAAC,GAAD,CAAczK,KAAK,QAAQuG,MAAM,OAAOM,KZnHvB,cYmHgDC,YAAa2D,KAEhF,kBAACnC,GAAA,EAAD,CAAKlB,UAAWL,EAAIwC,eAEhB1I,EAAO4H,KAAI,SAACnH,GAAD,OACT,kBAAC,GAAD,CAAWhB,KAAMgB,EAAOf,IAAKe,EAAMR,KAAMmB,kBAAmBA,OAI9DwJ,kBAAQ5K,GACN,kBAACyH,GAAA,EAAD,CAAKlB,UAAWL,EAAI0C,mBAClB,kBAAClB,GAAA,EAAD,CAAYC,QAAQ,MAApB,iDAIA,S,oBCpIDnC,iBAAW,gBAAGsC,EAAH,EAAGA,QAAH,MAAkB,CAC1CC,QAAS,CACPlB,QAAS,OACTmB,cAAe,SACflB,WAAY,SACZmB,eAAgB,aAChBvB,MAAO,OACPwB,UAAW,OACXvB,QAAS,SACTwB,WAAYL,EAAQM,QAAQC,KAC5B3C,MAAOoC,EAAQM,QAAQE,aACvBuC,UAAW,UAGbC,wBAAyB,CACvBpE,MAAO,OACPG,QAAS,OACToB,eAAgB,aAChB8C,cAAe,IAGjBC,KAAM,CACJhC,SAAU,YAGZiC,UAAW,CACTrF,OAAQ,UAGVsF,iBAAkB,CAChBrE,QAAS,OACT2B,SAAU,OACV9B,MAAO,OACPI,WAAY,aACZmB,eAAgB,eAChB,uCAAwC,CACtCA,eAAgB,eAIpBkD,cAAe,CACbtE,QAAS,OACTmB,cAAe,SACfC,eAAgB,aAChBtB,QAAS,UAGXK,OAAQ,CACNtB,MAAO,W,SCII0F,GAvCG,SAAC,GAAoB,IAAlB/B,EAAiB,EAAjBA,WACbnD,EAAMC,KAEZ,OACE,kBAAC2D,GAAA,EAAD,CAAOC,UAAU,OAAOxC,IAAE,EAACyC,cAAY,EAACC,eAAa,GACnD,kBAACxC,GAAA,EAAD,CAAKlB,UAAWL,EAAI6B,SAClB,kBAACN,GAAA,EAAD,CAAKlB,UAAWL,EAAI4E,yBAClB,kBAACZ,GAAA,EAAD,CAASC,MAAM,aACb,kBAACC,GAAA,EAAD,CAAY5D,QAAS,kBAAM6C,EAAW,WAAW9C,UAAWL,EAAI8E,MAC9D,kBAAC,KAAD,QAGJ,kBAACtD,GAAA,EAAD,CAAYC,QAAQ,KAAKpB,UAAWL,EAAI+E,WAAxC,cAEF,kBAACxD,GAAA,EAAD,CAAKlB,UAAWL,EAAIgF,kBAEhB/G,OAAOC,KAAKiH,IAAWzD,KAAI,SAAClI,GAAD,OACzB,kBAAC4H,GAAA,EAAD,CAAMC,IAAE,EAACC,QAAS,IAAM9H,IAAKA,GAC3B,kBAAC+H,GAAA,EAAD,CAAKlB,UAAWL,EAAIiF,cAAezL,IAAKA,GACtC,kBAACgI,GAAA,EAAD,CAAYC,QAAQ,KAAKpB,UAAWL,EAAIc,OAAQtH,IAAKA,GAAMA,GAEzD2L,GAAU3L,GAAKkI,KAAI,SAACzG,GAAD,OACjB,kBAACuG,GAAA,EAAD,CAAYhI,IAAKyB,GAAKA,eCnC7BqE,iBAAW,gBAAGsC,EAAH,EAAGA,QAAH,MAAkB,CAC1CC,QAAS,CACPlB,QAAS,OACTmB,cAAe,SACflB,WAAY,SACZmB,eAAgB,SAChBvB,MAAO,OACPwB,UAAW,OACXvB,QAAS,SACTwB,WAAYL,EAAQM,QAAQC,KAC5B3C,MAAOoC,EAAQM,QAAQE,cAGzBC,aAAc,CACZ1B,QAAS,OACTmB,cAAe,SACfpC,OAAQ,uBAGV0F,aAAc,CACZzC,UAAW,OCuDA0C,GAhED,WACZ,IAAMhC,EAAWC,cACXtD,EAAMC,KAFM,EAImBe,mBAAS,IAJ5B,oBAIXhI,EAJW,KAIAsM,EAJA,OAKQtE,mBAAS,MALjB,oBAKXuE,EALW,KAKJC,EALI,KAOZC,ElBP0BtL,EAAQ4B,IAAI,akBS5CoF,qBAAU,WACJsE,GACFpC,EAASvK,EAAS,SAAU2M,MAE7B,CAACpC,EAAUoC,IA+Bd,OACE,kBAAClE,GAAA,EAAD,CAAKlB,UAAWL,EAAI6B,SAClB,kBAACL,GAAA,EAAD,CAAYC,QAAQ,MAApB,yBACA,kBAACD,GAAA,EAAD,mDACA,0BAAMnB,UAAWL,EAAIqC,aAAcqD,YAAU,EAACC,aAAa,OACzD,kBAACxB,GAAA,EAAD,CACErJ,GAAG,YACHsJ,MAAM,aACN3C,QAAQ,WACRxE,MAAOjE,EACPuM,QAASA,EACTK,WAAYL,EACZlB,SAAU,SAACC,GAAD,OA3BarH,EA2BgBqH,EAAEC,OAAOtH,MA1BtDuI,EAAS,WACTF,EAAgBrI,GAFY,IAACA,KA6BzB,kBAACmD,GAAA,EAAD,CAAQC,UAAWL,EAAIoF,aAAcnM,KAAK,SAASqH,QAxBrC,SAACgE,GACnBA,EAAEuB,iBACF,IArBgB5I,EAqBV6I,EAAsB9M,EAAU+M,QAAQ,IAAK,MArBnC9I,EAuBH6I,GAtBHrL,OAAS,GACjB+K,EAAS,6BACF,GAGK,KAAVvI,GAAkB,iBAAkB+I,KAAK/I,KAC3CuI,EAAS,2BACF,MAgBPnC,EAASvK,EAAS,SAAUgN,IlB3CN,SAAC7I,GAC3B9C,EAAQ8L,IAAI,YAAahJ,EAAO,CAAEiJ,OAAQ,QkB2CtCC,CAAaL,MAkBX,S,8BCnEOM,gBAAe,CAC5BxE,QAAS,CACP3I,KAAM,OAENiJ,QAAS,CACPC,KAAMkE,KAAK,MAGbC,UAAW,CACTnE,KAAMkE,KAAK,MAIfE,UAAW,CACTC,cAAe,CACbC,MAAO,CACLC,WAAY,WACZ,wCAAyC,IAI3CC,GAAI,CACFD,WAAY,eAGdE,GAAI,CACFF,WAAY,eAGdG,GAAI,CACFH,WAAY,eAGdI,GAAI,CACFJ,WAAY,mBCwCLK,GA3DH,WACV,IAAM1D,EAAWC,cAEXvK,EAAOmH,aAAY,SAACvG,GAAD,OdtBC,SAACA,GAAD,OAAWA,EAAMD,IAAIX,KcsBXiO,CAAarN,MAC3CX,EAAYkH,aAAY,SAACvG,GAAD,OAAWyD,EAAkBzD,MACrDR,EAAa+G,aAAY,SAACvG,GAAD,OAAW0D,EAAmB1D,MAE7DwH,qBAAU,WACR,IAAM8F,EAAY,kBAAM5D,ExBPO,CAAEpK,KADR,mBwBYzB,OAFAiO,OAAOC,iBAAiB,eAAgBF,GAEjC,WACLC,OAAOE,oBAAoB,eAAgBH,MAE5C,CAAC5D,EAAUrK,IAEdmI,qBAAU,WACJhI,GACF4E,EAAoBsJ,SAASnK,MAAM/D,GAAYmO,GAAG,SAAS,SAAC/N,GAC1D8J,EAAS/J,EAAeC,EAAKyE,aAGhC,CAACqF,EAAUrK,EAAWG,IAEzB,IAAMoO,EAAmB,SAACC,GACxBnE,ExBnBsB,SAACtK,GAAD,MAAW,CACnCE,KAFyB,cAGzBF,QwBiBWoK,CAAWqE,KAGhBC,EAAqB,WpBjCOtN,EAAQ0B,OAAO,aoBmC/CwH,ExB9B+B,CAAEpK,KADR,mBwBoD3B,OACE,kBAACyO,GAAA,EAAD,CAAeC,MAAOA,IAnBL,WACjB,OAAQ5O,GACN,IAAK,SACH,OACE,kBAAC,GAAD,CACEoK,WAAYoE,EACZnE,aAAcqE,IAGpB,IAAK,YACH,OAAO,kBAAC,GAAD,CAAWtE,WAAYoE,IAChC,QACE,OACE,kBAAC,GAAD,OAOHK,KC/DD7I,I,OAAQH,MAEdiJ,IAASC,OACP,kBAAC,IAAD,CAAU/I,MAAOA,IACf,kBAAC,IAAMgJ,WAAP,KACE,kBAAC,GAAD,QAGJC,SAASC,eAAe,U","file":"static/js/main.33011d14.chunk.js","sourcesContent":["export const ENTER_APP = 'ENTER_APP';\nexport const enterApp = (page, sessionId) => ({\n  type: ENTER_APP,\n  page,\n  sessionId,\n});\n\nexport const SET_SESSION_KEY = 'SET_SESSION_KEY';\nexport const setSessionKey = (sessionKey) => ({\n  type: SET_SESSION_KEY,\n  sessionKey,\n});\n\nexport const SET_CLIENT_ID = 'SET_CLIENT_ID';\nexport const setClientId = (clientId) => ({\n  type: SET_CLIENT_ID,\n  clientId,\n});\n\nexport const RESET_SESSION = 'RESET_SESSION';\nexport const resetSession = () => ({ type: RESET_SESSION });\n\nexport const RESET_SESSION_COMPLETE = 'RESET_SESSION_COMPLETE';\nexport const resetSessionComplete = () => ({ type: RESET_SESSION_COMPLETE });\n\nexport const CHANGE_PAGE = 'CHANGE_PAGE';\nexport const changePage = (page) => ({\n  type: CHANGE_PAGE,\n  page,\n});\n\nexport const FILTER_GHOSTS = 'FILTER_GHOSTS';\nexport const filterGhosts = (evidence, isActive) => ({\n  type: FILTER_GHOSTS,\n  evidence,\n  isActive,\n});\n\nexport const UPDATE_SELECTED_QUESTS = 'UPDATE_SELECTED_QUESTS';\nexport const updateSelectedQuests = (quest, isActive) => ({\n  type: UPDATE_SELECTED_QUESTS,\n  quest,\n  isActive,\n});\n\nexport const UPDATE_GHOST_NAME = 'UPDATE_GHOST_NAME';\nexport const updateGhostName = (name) => ({\n  type: UPDATE_GHOST_NAME,\n  name,\n});\n\nexport const UPDATE_ANSWERS_EVERYONE_BUTTON = 'UPDATE_ANSWERS_EVERYONE_BUTTON';\nexport const updateAnswersEveryoneButton = (isActive) => ({\n  type: UPDATE_ANSWERS_EVERYONE_BUTTON,\n  isActive,\n});\n\nexport const RESET_PICKER = 'RESET_PICKER';\nexport const resetPicker = () => ({ type: RESET_PICKER });\n\nexport const SET_PICKER_STATE = 'SET_PICKER_STATE';\nexport const setPickerState = (data, key) => ({\n  type: SET_PICKER_STATE,\n  data,\n  key,\n});\n","import {\n  CHANGE_PAGE, ENTER_APP, RESET_SESSION_COMPLETE,\n  SET_SESSION_KEY, SET_CLIENT_ID,\n} from '../actions';\n\nconst defaultState = {\n  page: '',\n  sessionId: '',\n  sessionKey: null,\n  clientId: null,\n};\n\nconst app = (state = defaultState, action) => {\n  switch (action.type) {\n    case CHANGE_PAGE: {\n      const { page } = action;\n\n      return ({\n        ...state,\n        page,\n      });\n    }\n\n    case ENTER_APP: {\n      const { page, sessionId } = action;\n\n      return ({\n        page,\n        sessionId,\n      });\n    }\n\n    case SET_CLIENT_ID: {\n      const { clientId } = action;\n\n      return {\n        ...state,\n        clientId,\n      };\n    }\n\n    case RESET_SESSION_COMPLETE: {\n      return defaultState;\n    }\n\n    case SET_SESSION_KEY: {\n      const { sessionKey } = action;\n\n      return {\n        ...state,\n        sessionKey,\n      };\n    }\n\n    default:\n      return state;\n  }\n};\n\nexport default app;\n","export const EMF = 'EMF';\nexport const FINGERPRINTS = 'Fingerprints';\nexport const TEMPERATURE = 'Temperature';\nexport const GHOST_WRITING = 'Ghost Writing';\nexport const SPIRIT_BOX = 'Spirit Box';\nexport const GHOST_ORB = 'Ghost Orb';\n","import {\n  EMF, FINGERPRINTS, TEMPERATURE,\n  GHOST_WRITING, GHOST_ORB, SPIRIT_BOX,\n} from './evidences';\n\nconst ghosts = [\n  {\n    name: 'Banshee',\n    evidences: [EMF, FINGERPRINTS, TEMPERATURE],\n    strength: 'Only targets one player at a time',\n    weakness: 'Hates the Crucifix',\n  },\n\n  {\n    name: 'Demon',\n    evidences: [TEMPERATURE, GHOST_WRITING, SPIRIT_BOX],\n    strength: 'Extremely aggressive',\n    weakness: 'Using the Ouija board to ask questions does not drain sanity',\n  },\n\n  {\n    name: 'Jinn',\n    evidences: [EMF, SPIRIT_BOX, GHOST_ORB],\n    strength: 'Moves faster the further away you are from it',\n    weakness: 'Cutting off the location’s power supply will limit the Jinn’s speed',\n  },\n\n  {\n    name: 'Mare',\n    evidences: [TEMPERATURE, SPIRIT_BOX, GHOST_ORB],\n    strength: 'Attacks more frequently in the dark, tends to switch off lights',\n    weakness: 'Keeping the lights on',\n  },\n\n  {\n    name: 'Oni',\n    evidences: [EMF, GHOST_WRITING, SPIRIT_BOX],\n    strength: 'Extremely active and moves objects quickly',\n    weakness: 'Extreme activity with lots of players nearby makes it easy to identify',\n  },\n\n  {\n    name: 'Phantom',\n    evidences: [EMF, TEMPERATURE, GHOST_ORB],\n    strength: 'Looking at the Phantom will reduce your sanity',\n    weakness: 'Capturing a photo will cause it to disappear, not during a hunt',\n  },\n\n  {\n    name: 'Poltergeist',\n    evidences: [FINGERPRINTS, SPIRIT_BOX, GHOST_ORB],\n    strength: 'Throws multiple objects about at once',\n    weakness: 'Rooms without any stuff in to throw',\n  },\n\n  {\n    name: 'Revenant',\n    evidences: [EMF, FINGERPRINTS, GHOST_WRITING],\n    strength: 'Attacks anyone, regardless of sanity levels',\n    weakness: 'Moves extremely slowly when players hide',\n  },\n\n  {\n    name: 'Shade',\n    evidences: [EMF, GHOST_WRITING, GHOST_ORB],\n    strength: 'Minimal activity, hard to find and detect',\n    weakness: 'Does not hunt if players are in a group',\n  },\n\n  {\n    name: 'Spirit',\n    evidences: [FINGERPRINTS, GHOST_WRITING, SPIRIT_BOX],\n    strength: 'No strengths',\n    weakness: 'Using smudge sticks stops from starting for a long time',\n  },\n\n  {\n    name: 'Wraith',\n    evidences: [FINGERPRINTS, TEMPERATURE, SPIRIT_BOX],\n    strength: 'Can fly through walls and does not leave footprints',\n    weakness: 'Salt is toxic for Wraith',\n  },\n\n  {\n    name: 'Yurei',\n    evidences: [TEMPERATURE, GHOST_WRITING, GHOST_ORB],\n    strength: 'Drains player sanity especially quickly',\n    weakness: 'Smudge stick in the same room will stop the Yurei from moving',\n  },\n];\n\nexport default ghosts;\n","import { filter, find, difference } from 'lodash';\nimport Cookies from 'universal-cookie';\n\nconst cookies = new Cookies();\n\nexport const filterGhostsByEvidences = (ghosts, evidences) => (\n  filter(ghosts, (ghost) => difference(evidences, ghost.evidences).length === 0)\n);\n\nexport const setSessionId = (value) => {\n  cookies.set('sessionId', value, { maxAge: 28800 });\n};\n\nexport const getSessionId = () => cookies.get('sessionId');\n\nexport const resetSessionId = () => cookies.remove('sessionId');\n\nexport const getCurrentTimestamp = () => Date.now();\n\nexport const getSessionById = (id, objects) => (\n  find(objects, (el) => el.sessionId === id) || ''\n);\n","import { get, remove } from 'lodash';\n\nimport {\n  FILTER_GHOSTS, UPDATE_SELECTED_QUESTS,\n  UPDATE_GHOST_NAME, RESET_PICKER, UPDATE_ANSWERS_EVERYONE_BUTTON,\n  SET_PICKER_STATE,\n} from '../actions';\n\nimport ghosts from '../data/ghosts';\n\nimport {\n  EMF, FINGERPRINTS, TEMPERATURE,\n  GHOST_WRITING, SPIRIT_BOX, GHOST_ORB,\n} from '../data/evidences';\n\nimport {\n  EMF as EMF_QUEST, TEMPERATURE as TEMPERATURE_QUEST,\n  CRUCIFIX, EVENT, MOTION, PHOTO, SINK, SMUDGE,\n} from '../data/quests';\n\nimport { filterGhostsByEvidences } from '../utils';\n\nconst defaultState = {\n  selectedEvidences: [],\n  ghosts,\n  evidenceButtons: {\n    [EMF]: false,\n    [FINGERPRINTS]: false,\n    [TEMPERATURE]: false,\n    [GHOST_WRITING]: false,\n    [SPIRIT_BOX]: false,\n    [GHOST_ORB]: false,\n  },\n  questButtons: {\n    [SINK]: false,\n    [PHOTO]: false,\n    [MOTION]: false,\n    [TEMPERATURE_QUEST]: false,\n    [CRUCIFIX]: false,\n    [EMF_QUEST]: false,\n    [SMUDGE]: false,\n    [EVENT]: false,\n  },\n  talksToEveryOne: false,\n  ghostName: '',\n};\n\nconst picker = (state = defaultState, action) => {\n  switch (action.type) {\n    case FILTER_GHOSTS: {\n      const { evidence, isActive } = action;\n      const { selectedEvidences } = state;\n\n      const updatedButtonsState = {\n        ...state.evidenceButtons,\n        [evidence]: isActive,\n      };\n\n      if (isActive) {\n        selectedEvidences.push(evidence);\n\n        const filteredGhosts = filterGhostsByEvidences(ghosts, selectedEvidences);\n\n        return {\n          ...state,\n          ghosts: filteredGhosts,\n          selectedEvidences,\n          evidenceButtons: updatedButtonsState,\n        };\n      }\n\n      remove(selectedEvidences, (el) => el === evidence);\n\n      const filteredGhosts = filterGhostsByEvidences(ghosts, selectedEvidences);\n\n      return {\n        ...state,\n        ghosts: filteredGhosts,\n        selectedEvidences,\n        evidenceButtons: updatedButtonsState,\n      };\n    }\n\n    case UPDATE_GHOST_NAME: {\n      const { name } = action;\n\n      return {\n        ...state,\n        ghostName: name,\n      };\n    }\n\n    case UPDATE_SELECTED_QUESTS: {\n      const { quest, isActive } = action;\n\n      return {\n        ...state,\n        questButtons: {\n          ...state.questButtons,\n          [quest]: isActive,\n        },\n      };\n    }\n\n    case UPDATE_ANSWERS_EVERYONE_BUTTON: {\n      const { isActive } = action;\n\n      return {\n        ...state,\n        talksToEveryOne: isActive,\n      };\n    }\n\n    case RESET_PICKER: {\n      return {\n        ...defaultState,\n        selectedEvidences: [],\n      };\n    }\n\n    case SET_PICKER_STATE: {\n      const { data } = action;\n      const selectedEvidences = get(data, 'selectedEvidences', []);\n\n      return {\n        ...state,\n        ...data,\n        selectedEvidences,\n        ghosts: filterGhostsByEvidences(ghosts, selectedEvidences),\n      };\n    }\n\n    default:\n      return state;\n  }\n};\n\nexport default picker;\n","export const SINK = 'Sink';\nexport const PHOTO = 'Photo';\nexport const EVENT = 'Event';\nexport const MOTION = 'Motion';\nexport const TEMPERATURE = 'Temperature';\nexport const CRUCIFIX = 'Crucifix';\nexport const EMF = 'EMF';\nexport const SMUDGE = 'Smudge';\n","import { combineReducers } from 'redux';\n\nimport app from './app';\nimport picker from './picker';\n\nexport default combineReducers({\n  app,\n  picker,\n});\n","import firebase from 'firebase/app';\nimport 'firebase/database';\n\nconst config = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_API_DOMAIN,\n  databaseURL: process.env.REACT_APP_FIREBASE_DB_URL,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSANGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APPID,\n};\n\nfirebase.initializeApp(config);\n\nexport default firebase.database();\n","import firebase from '../firebase';\n\nclass FirebaseDataService {\n  getSessionById(sessionId) {\n    return firebase.ref()\n      .orderByChild('sessionId')\n      .equalTo(sessionId)\n      .once('value');\n  }\n\n  createSession(session) {\n    return firebase.ref().push(session);\n  }\n\n  updateSession(key, value) {\n    return firebase.ref().child(key).update(value);\n  }\n\n  removeSession(key) {\n    return firebase.ref().child(key).remove();\n  }\n\n  getRef() {\n    return firebase.ref();\n  }\n}\n\nexport default new FirebaseDataService();\n","export const pageSelector = (state) => state.app.page;\n\nexport const sessionIdSelector = (state) => state.app.sessionId;\n\nexport const sessionKeySelector = (state) => state.app.sessionKey;\n\nexport const clientIdSelector = (state) => state.app.clientId;\n\nexport const selectedEvidencesSelector = (state) => state.picker.selectedEvidences;\n\nexport const questButtonsStateSelector = (state) => state.picker.questButtons;\n\nexport const isActiveButtonSelector = (state, type, name) => {\n  switch (type) {\n    case 'evidence': {\n      return state.picker.evidenceButtons[name];\n    }\n\n    case 'quest': {\n      return state.picker.questButtons[name];\n    }\n\n    case 'talksToEveryOne': {\n      return state.picker.talksToEveryOne;\n    }\n\n    default: {\n      return false;\n    }\n  }\n};\n\nexport const pickerStateSelector = (state) => state.picker;\n","import {\n  call, put, takeEvery, select, takeLatest,\n} from 'redux-saga/effects';\n\nimport { get, remove } from 'lodash';\nimport { nanoid } from 'nanoid';\n\nimport firebaseDataService from '../services/firebaseData';\nimport {\n  sessionKeySelector, pickerStateSelector,\n  sessionIdSelector, clientIdSelector,\n} from '../selectors';\n\nimport { getSessionById, getCurrentTimestamp } from '../utils';\n\nimport {\n  ENTER_APP, RESET_SESSION, UPDATE_ANSWERS_EVERYONE_BUTTON,\n  UPDATE_SELECTED_QUESTS, UPDATE_GHOST_NAME, FILTER_GHOSTS, RESET_PICKER,\n  setPickerState, resetSessionComplete, resetPicker, setSessionKey,\n  setClientId,\n} from '../actions';\n\nconst createPickerStateObject = (picker, sessionId) => {\n  const {\n    selectedEvidences, evidenceButtons, questButtons,\n    talksToEveryOne, ghostName,\n  } = picker;\n\n  return {\n    sessionId,\n    selectedEvidences,\n    evidenceButtons,\n    questButtons,\n    talksToEveryOne,\n    ghostName,\n    updatedAt: getCurrentTimestamp(),\n  };\n};\n\nfunction* enterApp(action) {\n  const { sessionId } = action;\n  const clientId = nanoid(10);\n\n  if (sessionId !== '') {\n    const data = yield call(firebaseDataService.getSessionById, sessionId);\n    const session = getSessionById(sessionId, data.val());\n\n    if (session) {\n      const key = Object.keys(data.val())[0];\n      const clients = get(session, 'clients', []);\n      clients.push(clientId);\n\n      yield call(\n        firebaseDataService.updateSession,\n        key,\n        {\n          ...session,\n          clients,\n          updatedAt: getCurrentTimestamp(),\n        },\n      );\n\n      yield put(setPickerState(session));\n      yield put(setSessionKey(key));\n    } else {\n      const picker = yield select(pickerStateSelector);\n      const objectToStore = createPickerStateObject(picker, sessionId);\n\n      const newSessionKey = yield call(\n        firebaseDataService.createSession,\n        {\n          ...objectToStore,\n          clients: [clientId],\n        },\n      );\n      yield put(setSessionKey(newSessionKey.key));\n    }\n\n    yield put(setClientId(clientId));\n  }\n}\n\nfunction* removeSession() {\n  const sessionId = yield select(sessionIdSelector);\n  const clientId = yield select(clientIdSelector);\n  const key = yield select(sessionKeySelector);\n\n  const data = yield call(firebaseDataService.getSessionById, sessionId);\n  const session = getSessionById(sessionId, data.val());\n\n  const clients = get(session, 'clients', []);\n\n  if (clients.length === 1) {\n    yield call(firebaseDataService.removeSession, key);\n  } else {\n    remove(clients, (el) => el === clientId);\n\n    yield call(\n      firebaseDataService.updateSession,\n      key,\n      {\n        ...session,\n        clients,\n        updatedAt: getCurrentTimestamp(),\n      },\n    );\n  }\n\n  yield put(resetSessionComplete());\n  yield put(resetPicker());\n}\n\nfunction* handlePickerChange() {\n  const sessionKey = yield select(sessionKeySelector);\n  const sessionId = yield select(sessionIdSelector);\n  const picker = yield select(pickerStateSelector);\n\n  const objectToStore = createPickerStateObject(picker, sessionId);\n\n  if (sessionKey && sessionId !== '') {\n    yield call(firebaseDataService.updateSession, sessionKey, objectToStore);\n    return;\n  }\n\n  if (!sessionKey && sessionId.length > 0) {\n    const newSessionKey = yield call(firebaseDataService.createSession, objectToStore);\n    yield put(setSessionKey(newSessionKey.key));\n  }\n}\n\nfunction* rootSaga() {\n  yield takeEvery(ENTER_APP, enterApp);\n  yield takeEvery(RESET_SESSION, removeSession);\n  yield takeLatest([\n    UPDATE_GHOST_NAME,\n    UPDATE_SELECTED_QUESTS,\n    UPDATE_ANSWERS_EVERYONE_BUTTON,\n    FILTER_GHOSTS,\n    RESET_PICKER,\n  ], handlePickerChange);\n}\n\nexport default rootSaga;\n","import { createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport reducer from './reducers';\nimport rootSaga from './sagas';\n\nconst configureStore = () => {\n  const sagaMiddleware = createSagaMiddleware();\n\n  const store = createStore(\n    reducer,\n    process.env.REACT_APP_ENV === 'dev'\n      ? composeWithDevTools(applyMiddleware(sagaMiddleware))\n      : applyMiddleware(sagaMiddleware),\n  );\n\n  sagaMiddleware.run(rootSaga);\n\n  return store;\n};\n\nexport default configureStore;\n","import { makeStyles } from '@material-ui/core/styles';\n\nexport default makeStyles({\n  button: {\n    color: (props) => props.color,\n    margin: '0 5px',\n  },\n\n  buttonSelected: {\n    color: (props) => props.color,\n    border: '2px solid red',\n    margin: '0 2px',\n  },\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\n\nimport { Button } from '@material-ui/core';\n\nimport useStyles from './styles';\n\nimport { isActiveButtonSelector } from '../../../selectors';\n\nconst CustomButton = ({\n  type, text, handleClick, ...props\n}) => {\n  const css = useStyles(props);\n\n  const isActive = useSelector((state) => isActiveButtonSelector(state, type, text));\n\n  return (\n    <Button\n      className={isActive ? css.buttonSelected : css.button}\n      onClick={() => handleClick(text, !isActive)}\n    >\n      {text}\n    </Button>\n  );\n};\n\nCustomButton.propTypes = {\n  type: PropTypes.string.isRequired,\n  text: PropTypes.string.isRequired,\n  handleClick: PropTypes.func.isRequired,\n};\n\nexport default CustomButton;\n","import { makeStyles } from '@material-ui/core/styles';\n\nexport default makeStyles(() => ({\n  root: {\n    width: 200,\n    padding: 20,\n  },\n\n  content: {\n    display: 'flex',\n    alignItems: 'center',\n  },\n\n  accent: {\n    color: 'green',\n  },\n\n  header: {\n    color: 'red',\n  },\n}));\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport Fade from '@material-ui/core/Fade';\n\nimport useStyles from './styles';\n\nconst GhostCard = ({ data, selectedEvidences }) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const css = useStyles();\n\n  const {\n    name, strength, weakness, evidences,\n  } = data;\n\n  useEffect(() => {\n    setIsOpen(true);\n\n    return (() => {\n      setIsOpen(false);\n    });\n  }, []);\n\n  return (\n    <Fade in={isOpen} timeout={1000}>\n      <Box className={css.root}>\n        <Typography variant=\"h4\" className={css.header}>{name}</Typography>\n        <Typography variant=\"h6\" color=\"secondary\">Evidences</Typography>\n        {\n          evidences.map((el) => (\n            <Box key={el}>\n              <Typography className={selectedEvidences.includes(el) ? css.accent : ''}>{el}</Typography>\n            </Box>\n          ))\n        }\n        <Typography variant=\"h6\">Strength</Typography>\n        <Typography className={css.content}>{strength}</Typography>\n        <Typography variant=\"h6\">Weakness</Typography>\n        <Typography className={css.content}>{weakness}</Typography>\n      </Box>\n    </Fade>\n  );\n};\n\nGhostCard.propTypes = {\n  data: PropTypes.shape({\n    name: PropTypes.string,\n    evidences: PropTypes.arrayOf(PropTypes.string).isRequired,\n    strength: PropTypes.string.isRequired,\n    weakness: PropTypes.string.isRequired,\n  }).isRequired,\n  selectedEvidences: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nexport default GhostCard;\n","import { makeStyles } from '@material-ui/core';\n\nexport default makeStyles(({ palette }) => ({\n  wrapper: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'flex-start',\n    width: '100%',\n    minHeight: '100%',\n    padding: 0,\n    background: palette.primary.main,\n    color: palette.primary.contrastText,\n  },\n\n  inputWrapper: {\n    display: 'flex',\n    justifyContent: 'center',\n    padding: '20px 20px',\n    flexWrap: 'wrap',\n  },\n\n  evidencesButtonsWrapper: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: '20px px',\n    flexWrap: 'wrap',\n  },\n\n  ghostsWrapper: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    alignContent: 'center',\n    justifyContent: 'center',\n    padding: '0 50px',\n  },\n\n  noEvidenceWrapper: {\n    padding: 50,\n  },\n\n  header: {\n    width: '100%',\n    display: 'flex',\n    justifyContent: 'center',\n    marginTop: 40,\n  },\n\n  sessionControls: {\n    display: 'flex',\n    height: 40,\n    width: '100%',\n    background: 'rgba(33, 33, 33, .6)',\n    justifyContent: 'flex-end',\n    position: 'fixed',\n    zIndex: 10,\n  },\n\n  sessionIdWrapper: {\n    display: 'flex',\n    alignItems: 'center',\n    marginRight: 5,\n  },\n}));\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { isEmpty } from 'lodash';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport Slide from '@material-ui/core/Slide';\nimport Box from '@material-ui/core/Box';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\n\nimport {\n  EMF, FINGERPRINTS, TEMPERATURE,\n  GHOST_WRITING, SPIRIT_BOX, GHOST_ORB,\n} from '../../data/evidences';\n\nimport {\n  EMF as EMF_QUEST, TEMPERATURE as TEMPERATURE_QUEST,\n  CRUCIFIX, EVENT, MOTION, PHOTO, SINK, SMUDGE,\n} from '../../data/quests';\n\nimport { pickerStateSelector, sessionIdSelector } from '../../selectors';\n\nimport {\n  updateGhostName, filterGhosts, updateSelectedQuests,\n  resetPicker, updateAnswersEveryoneButton,\n} from '../../actions';\n\nimport CustomButton from './Buttons/CustomButton';\nimport GhostCard from './GhostCard';\n\nimport useStyles from './styles';\n\nconst Picker = ({ changePage, resetSession }) => {\n  const dispatch = useDispatch();\n  const css = useStyles();\n\n  const pickerState = useSelector((state) => pickerStateSelector(state));\n  const sessionId = useSelector((state) => sessionIdSelector(state));\n\n  const handleGhostNameChange = (name) => {\n    dispatch(updateGhostName(name));\n  };\n\n  const handleEvidenceButtonClick = (evidence, isActive) => {\n    dispatch(filterGhosts(evidence, isActive));\n  };\n\n  const handleQuestButtonClick = (quest, isActive) => {\n    dispatch(updateSelectedQuests(quest, isActive));\n  };\n\n  const handleAnswersEveryoneButton = (text, isActive) => {\n    dispatch(updateAnswersEveryoneButton(isActive));\n  };\n\n  const handleReset = () => {\n    dispatch(resetPicker());\n  };\n\n  const { ghostName, ghosts, selectedEvidences } = pickerState;\n\n  return (\n    <Slide direction=\"right\" in mountOnEnter unmountOnExit>\n      <Box className={css.wrapper}>\n        <Box className={css.sessionControls}>\n          {\n            sessionId !== '' && (\n              <Box className={css.sessionIdWrapper}>\n                <Typography>{`Session id: ${sessionId}`}</Typography>\n              </Box>\n            )\n          }\n          <Tooltip title=\"Exit room\">\n            <IconButton onClick={() => resetSession()}>\n              <ExitToAppIcon />\n            </IconButton>\n          </Tooltip>\n          <Tooltip title=\"To questions\">\n            <IconButton onClick={() => changePage('questions')}>\n              <ArrowForwardIosIcon />\n            </IconButton>\n          </Tooltip>\n        </Box>\n        <Box className={css.header}>\n          <Typography variant=\"h3\">Ghost Picker</Typography>\n        </Box>\n        <Box className={css.inputWrapper}>\n          <TextField\n            id=\"ghost-name\"\n            label=\"Ghost Name\"\n            variant=\"outlined\"\n            value={ghostName}\n            onChange={(e) => handleGhostNameChange(e.target.value)}\n          />\n          <CustomButton type=\"talksToEveryOne\" color=\"grey\" text=\"Answers everyone\" handleClick={handleAnswersEveryoneButton} />\n          <CustomButton type=\"reset\" color=\"grey\" text=\"Reset\" handleClick={handleReset} />\n        </Box>\n        <Typography variant=\"h4\">Evidences</Typography>\n        <Box className={css.evidencesButtonsWrapper}>\n          <CustomButton type=\"evidence\" color=\"red\" text={EMF} handleClick={handleEvidenceButtonClick} />\n          <CustomButton type=\"evidence\" color=\"green\" text={FINGERPRINTS} handleClick={handleEvidenceButtonClick} />\n          <CustomButton type=\"evidence\" color=\"dodgerblue\" text={TEMPERATURE} handleClick={handleEvidenceButtonClick} />\n          <CustomButton type=\"evidence\" color=\"purple\" text={GHOST_WRITING} handleClick={handleEvidenceButtonClick} />\n          <CustomButton type=\"evidence\" color=\"cadetblue\" text={SPIRIT_BOX} handleClick={handleEvidenceButtonClick} />\n          <CustomButton type=\"evidence\" color=\"brown\" text={GHOST_ORB} handleClick={handleEvidenceButtonClick} />\n        </Box>\n        <Typography variant=\"h4\">Quests</Typography>\n        <Box className={css.evidencesButtonsWrapper}>\n          <CustomButton type=\"quest\" color=\"grey\" text={CRUCIFIX} handleClick={handleQuestButtonClick} />\n          <CustomButton type=\"quest\" color=\"grey\" text={EVENT} handleClick={handleQuestButtonClick} />\n          <CustomButton type=\"quest\" color=\"grey\" text={MOTION} handleClick={handleQuestButtonClick} />\n          <CustomButton type=\"quest\" color=\"grey\" text={PHOTO} handleClick={handleQuestButtonClick} />\n          <CustomButton type=\"quest\" color=\"grey\" text={EMF_QUEST} handleClick={handleQuestButtonClick} />\n          <CustomButton type=\"quest\" color=\"grey\" text={SINK} handleClick={handleQuestButtonClick} />\n          <CustomButton type=\"quest\" color=\"grey\" text={SMUDGE} handleClick={handleQuestButtonClick} />\n          <CustomButton type=\"quest\" color=\"grey\" text={TEMPERATURE_QUEST} handleClick={handleQuestButtonClick} />\n        </Box>\n        <Box className={css.ghostsWrapper}>\n          {\n            ghosts.map((ghost) => (\n              <GhostCard data={ghost} key={ghost.name} selectedEvidences={selectedEvidences} />\n            ))\n          }\n          {\n            isEmpty(ghosts) ? (\n              <Box className={css.noEvidenceWrapper}>\n                <Typography variant=\"h6\">\n                  No ghosts with such combination of evidences\n                </Typography>\n              </Box>\n            ) : null\n          }\n        </Box>\n      </Box>\n    </Slide>\n  );\n};\n\nPicker.propTypes = {\n  changePage: PropTypes.func.isRequired,\n  resetSession: PropTypes.func.isRequired,\n};\n\nexport default Picker;\n","import { makeStyles } from '@material-ui/core';\n\nexport default makeStyles(({ palette }) => ({\n  wrapper: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'flex-start',\n    width: '100%',\n    minHeight: '100%',\n    padding: '20px 0',\n    background: palette.primary.main,\n    color: palette.primary.contrastText,\n    overflowX: 'hidden',\n  },\n\n  changePageButtonWrapper: {\n    width: '100%',\n    display: 'flex',\n    justifyContent: 'flex-start',\n    paddingBottom: 10,\n  },\n\n  icon: {\n    position: 'absolute',\n  },\n\n  pageLabel: {\n    margin: '0 auto',\n  },\n\n  questionsWrapper: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    width: '100%',\n    alignItems: 'flex-start',\n    justifyContent: 'space-around',\n    '@media screen and (max-width: 880px)': {\n      justifyContent: 'flex-start',\n    },\n  },\n\n  columnWrapper: {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'flex-start',\n    padding: '0 30px',\n  },\n\n  header: {\n    color: 'red',\n  },\n}));\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Box from '@material-ui/core/Box';\nimport IconButton from '@material-ui/core/IconButton';\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\nimport Slide from '@material-ui/core/Slide';\nimport Fade from '@material-ui/core/Fade';\nimport Typography from '@material-ui/core/Typography';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nimport useStyles from './styles';\n\nimport questions from '../../data/questions.json';\n\nconst Questions = ({ changePage }) => {\n  const css = useStyles();\n\n  return (\n    <Slide direction=\"left\" in mountOnEnter unmountOnExit>\n      <Box className={css.wrapper}>\n        <Box className={css.changePageButtonWrapper}>\n          <Tooltip title=\"To Picker\">\n            <IconButton onClick={() => changePage('picker')} className={css.icon}>\n              <ArrowBackIosIcon />\n            </IconButton>\n          </Tooltip>\n          <Typography variant=\"h3\" className={css.pageLabel}>Questions</Typography>\n        </Box>\n        <Box className={css.questionsWrapper}>\n          {\n            Object.keys(questions).map((key) => (\n              <Fade in timeout={1000} key={key}>\n                <Box className={css.columnWrapper} key={key}>\n                  <Typography variant=\"h4\" className={css.header} key={key}>{key}</Typography>\n                  {\n                    questions[key].map((el) => (\n                      <Typography key={el}>{el}</Typography>\n                    ))\n                  }\n                </Box>\n              </Fade>\n            ))\n          }\n        </Box>\n      </Box>\n    </Slide>\n  );\n};\n\nQuestions.propTypes = {\n  changePage: PropTypes.func.isRequired,\n};\n\nexport default Questions;\n","import { makeStyles } from '@material-ui/core';\n\nexport default makeStyles(({ palette }) => ({\n  wrapper: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center',\n    width: '100%',\n    minHeight: '100%',\n    padding: '20px 0',\n    background: palette.primary.main,\n    color: palette.primary.contrastText,\n  },\n\n  inputWrapper: {\n    display: 'flex',\n    flexDirection: 'column',\n    margin: '10px 20px 10px 20px',\n  },\n\n  submitButton: {\n    marginTop: 5,\n  },\n}));\n","import React, { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport Box from '@material-ui/core/Box';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\n\nimport { enterApp } from '../../actions';\nimport { getSessionId, setSessionId } from '../../utils';\n\nimport useStyles from './styles';\n\nconst Login = () => {\n  const dispatch = useDispatch();\n  const css = useStyles();\n\n  const [sessionId, changeSessionId] = useState('');\n  const [error, setError] = useState(null);\n\n  const sessionIdCookie = getSessionId();\n\n  useEffect(() => {\n    if (sessionIdCookie) {\n      dispatch(enterApp('picker', sessionIdCookie));\n    }\n  }, [dispatch, sessionIdCookie]);\n\n  const validate = (value) => {\n    if (value.length > 8) {\n      setError('Value is too long (max 8)');\n      return false;\n    }\n\n    if (value !== '' && !(/^[0-9a-zA-Z]+$/).test(value)) {\n      setError('Only digits and letters');\n      return false;\n    }\n\n    return true;\n  };\n\n  const handleSessionIdChange = (value) => {\n    setError(null);\n    changeSessionId(value);\n  };\n\n  const handleClick = (e) => {\n    e.preventDefault();\n    const sessionIdNormalized = sessionId.replace(' ', '');\n\n    if (validate(sessionIdNormalized)) {\n      dispatch(enterApp('picker', sessionIdNormalized));\n      setSessionId(sessionIdNormalized);\n    }\n  };\n\n  return (\n    <Box className={css.wrapper}>\n      <Typography variant=\"h5\">Enter your session id</Typography>\n      <Typography>Or leave it blank if you are playing solo.</Typography>\n      <form className={css.inputWrapper} noValidate autoComplete=\"off\">\n        <TextField\n          id=\"sessionID\"\n          label=\"Session ID\"\n          variant=\"outlined\"\n          value={sessionId}\n          error={!!error}\n          helperText={error}\n          onChange={(e) => handleSessionIdChange(e.target.value)}\n        />\n        <Button className={css.submitButton} type=\"submit\" onClick={handleClick}>Go</Button>\n      </form>\n    </Box>\n  );\n};\n\nexport default Login;\n","// import { createMuiTheme } from '@material-ui/core/styles';\nimport { unstable_createMuiStrictModeTheme as createMuiTheme } from '@material-ui/core';\nimport grey from '@material-ui/core/colors/grey';\n\nexport default createMuiTheme({\n  palette: {\n    type: 'dark',\n\n    primary: {\n      main: grey[900],\n    },\n\n    secondary: {\n      main: grey[50],\n    },\n  },\n\n  overrides: {\n    MuiTypography: {\n      body1: {\n        fontFamily: 'SyneMono',\n        '@media screen and (max-width: 1000px)': {\n        },\n      },\n\n      h3: {\n        fontFamily: 'Teko-Medium',\n      },\n\n      h4: {\n        fontFamily: 'Teko-Medium',\n      },\n\n      h5: {\n        fontFamily: 'Teko-Medium',\n      },\n\n      h6: {\n        fontFamily: 'Teko-Medium',\n      },\n    },\n  },\n});\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ThemeProvider } from '@material-ui/core/styles';\n\nimport {\n  changePage, resetSession, setPickerState,\n} from '../actions';\n\nimport { pageSelector, sessionIdSelector, sessionKeySelector } from '../selectors';\n\nimport { resetSessionId } from '../utils';\n\nimport Picker from './Picker';\nimport Questions from './Questions';\nimport Login from './Login';\n\nimport theme from './theme';\nimport firebaseDataService from '../services/firebaseData';\n\nconst App = () => {\n  const dispatch = useDispatch();\n\n  const page = useSelector((state) => pageSelector(state));\n  const sessionId = useSelector((state) => sessionIdSelector(state));\n  const sessionKey = useSelector((state) => sessionKeySelector(state));\n\n  useEffect(() => {\n    const onAppExit = () => dispatch(resetSession());\n\n    window.addEventListener('beforeunload', onAppExit);\n\n    return () => {\n      window.removeEventListener('beforeunload', onAppExit);\n    };\n  }, [dispatch, sessionId]);\n\n  useEffect(() => {\n    if (sessionKey) {\n      firebaseDataService.getRef().child(sessionKey).on('value', (data) => {\n        dispatch(setPickerState(data.val()));\n      });\n    }\n  }, [dispatch, sessionId, sessionKey]);\n\n  const handleChangePage = (newPage) => {\n    dispatch(changePage(newPage));\n  };\n\n  const handleSessionReset = () => {\n    resetSessionId();\n    dispatch(resetSession());\n  };\n\n  const renderPage = () => {\n    switch (page) {\n      case 'picker':\n        return (\n          <Picker\n            changePage={handleChangePage}\n            resetSession={handleSessionReset}\n          />\n        );\n      case 'questions':\n        return <Questions changePage={handleChangePage} />;\n      default:\n        return (\n          <Login />\n        );\n    }\n  };\n\n  return (\n    <ThemeProvider theme={theme}>\n      {renderPage()}\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport configureStore from './store';\n\nimport App from './components/App';\n\nimport './index.css';\n\nconst store = configureStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}