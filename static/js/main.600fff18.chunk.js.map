{"version":3,"sources":["actions/index.js","reducers/app.js","data/evidences.js","data/ghosts.js","utils/index.js","reducers/picker.js","data/quests.js","reducers/index.js","firebase.js","services/firebaseData.js","selectors/index.js","sagas/index.js","store.js","components/Picker/Buttons/styles.js","components/Picker/Buttons/CustomButton.jsx","components/Picker/GhostCard/styles.js","components/Picker/GhostCard/index.jsx","components/Picker/styles.js","components/Picker/index.jsx","components/Questions/styles.js","components/Questions/index.jsx","components/Login/styles.js","components/Login/index.jsx","components/theme.js","components/App.jsx","index.jsx"],"names":["enterApp","page","sessionId","type","setSessionKey","sessionKey","setPickerState","data","key","defaultState","app","state","action","EMF","ghosts","name","evidences","strength","weakness","cookies","Cookies","filterGhostsByEvidences","filter","ghost","difference","length","getSessionById","id","objects","find","el","selectedEvidences","evidenceButtons","questButtons","talksToEveryOne","ghostName","picker","evidence","isActive","updatedButtonsState","push","filteredGhosts","remove","quest","combineReducers","firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","database","ref","orderByChild","equalTo","once","session","value","child","update","sessionIdSelector","sessionKeySelector","pickerStateSelector","removeSession","handlePickerChange","rootSaga","call","firebaseDataService","val","Object","keys","put","select","objectToStore","updateSession","createSession","newSessionKey","takeEvery","takeLatest","sagaMiddleware","createSagaMiddleware","store","createStore","reducer","composeWithDevTools","applyMiddleware","run","makeStyles","button","color","props","margin","buttonSelected","border","CustomButton","text","handleClick","css","useStyles","useSelector","isActiveButtonSelector","Button","className","onClick","root","width","padding","content","display","alignItems","accent","header","GhostCard","useState","isOpen","setIsOpen","useEffect","Fade","in","timeout","Box","Typography","variant","map","includes","palette","wrapper","flexDirection","justifyContent","minHeight","background","primary","main","contrastText","inputWrapper","flexWrap","evidencesButtonsWrapper","ghostsWrapper","alignContent","noEvidenceWrapper","marginTop","sessionControls","height","position","zIndex","sessionIdWrapper","marginRight","Picker","changePage","resetSession","dispatch","useDispatch","pickerState","syncData","getRef","on","off","handleEvidenceButtonClick","filterGhosts","handleQuestButtonClick","updateSelectedQuests","Slide","direction","mountOnEnter","unmountOnExit","Tooltip","title","IconButton","TextField","label","onChange","e","target","updateGhostName","updateAnswersEveryoneButton","isEmpty","overflowX","changePageButtonWrapper","paddingBottom","icon","pageLabel","questionsWrapper","columnWrapper","Questions","questions","submitButton","Login","changeSessionId","error","setError","noValidate","autoComplete","helperText","preventDefault","sessionIdNormalized","replace","set","maxAge","setSessionId","createMuiTheme","grey","secondary","overrides","MuiTypography","body1","fontFamily","h3","h4","h5","h6","App","pageSelector","get","onAppExit","window","addEventListener","removeEventListener","handleChangePage","newPage","handleSessionReset","ThemeProvider","theme","renderPage","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.600fff18.chunk.js","sourcesContent":["export const ENTER_APP = 'ENTER_APP';\nexport const enterApp = (page, sessionId) => ({\n  type: ENTER_APP,\n  page,\n  sessionId,\n});\n\nexport const SET_SESSION_KEY = 'SET_SESSION_KEY';\nexport const setSessionKey = (sessionKey) => ({\n  type: SET_SESSION_KEY,\n  sessionKey,\n});\n\nexport const RESET_SESSION = 'RESET_SESSION';\nexport const resetSession = () => ({ type: RESET_SESSION });\n\nexport const RESET_SESSION_COMPLETE = 'RESET_SESSION_COMPLETE';\nexport const resetSessionComplete = () => ({ type: RESET_SESSION_COMPLETE });\n\nexport const CHANGE_PAGE = 'CHANGE_PAGE';\nexport const changePage = (page) => ({\n  type: CHANGE_PAGE,\n  page,\n});\n\nexport const FILTER_GHOSTS = 'FILTER_GHOSTS';\nexport const filterGhosts = (evidence, isActive) => ({\n  type: FILTER_GHOSTS,\n  evidence,\n  isActive,\n});\n\nexport const UPDATE_SELECTED_QUESTS = 'UPDATE_SELECTED_QUESTS';\nexport const updateSelectedQuests = (quest, isActive) => ({\n  type: UPDATE_SELECTED_QUESTS,\n  quest,\n  isActive,\n});\n\nexport const UPDATE_GHOST_NAME = 'UPDATE_GHOST_NAME';\nexport const updateGhostName = (name) => ({\n  type: UPDATE_GHOST_NAME,\n  name,\n});\n\nexport const UPDATE_ANSWERS_EVERYONE_BUTTON = 'UPDATE_ANSWERS_EVERYONE_BUTTON';\nexport const updateAnswersEveryoneButton = (isActive) => ({\n  type: UPDATE_ANSWERS_EVERYONE_BUTTON,\n  isActive,\n});\n\nexport const RESET_PICKER = 'RESET_PICKER';\nexport const resetPicker = () => ({ type: RESET_PICKER });\n\nexport const SET_PICKER_STATE = 'SET_PICKER_STATE';\nexport const setPickerState = (data, key) => ({\n  type: SET_PICKER_STATE,\n  data,\n  key,\n});\n","import {\n  CHANGE_PAGE, ENTER_APP, RESET_SESSION_COMPLETE,\n  SET_SESSION_KEY,\n} from '../actions';\n\nconst defaultState = {\n  page: '',\n  sessionId: '',\n  sessionKey: null,\n};\n\nconst app = (state = defaultState, action) => {\n  switch (action.type) {\n    case CHANGE_PAGE: {\n      const { page } = action;\n\n      return ({\n        ...state,\n        page,\n      });\n    }\n\n    case ENTER_APP: {\n      const { page, sessionId } = action;\n\n      return ({\n        page,\n        sessionId,\n      });\n    }\n\n    case RESET_SESSION_COMPLETE: {\n      return defaultState;\n    }\n\n    case SET_SESSION_KEY: {\n      const { sessionKey } = action;\n\n      return {\n        ...state,\n        sessionKey,\n      };\n    }\n\n    default:\n      return state;\n  }\n};\n\nexport default app;\n","export const EMF = 'EMF';\nexport const FINGERPRINTS = 'Fingerprints';\nexport const TEMPERATURE = 'Temperature';\nexport const GHOST_WRITING = 'Ghost Writing';\nexport const SPIRIT_BOX = 'Spirit Box';\nexport const GHOST_ORB = 'Ghost Orb';\n","import {\n  EMF, FINGERPRINTS, TEMPERATURE,\n  GHOST_WRITING, GHOST_ORB, SPIRIT_BOX,\n} from './evidences';\n\nconst ghosts = [\n  {\n    name: 'Banshee',\n    evidences: [EMF, FINGERPRINTS, TEMPERATURE],\n    strength: 'Only targets one player at a time',\n    weakness: 'Hates the Crucifix',\n  },\n\n  {\n    name: 'Demon',\n    evidences: [TEMPERATURE, GHOST_WRITING, SPIRIT_BOX],\n    strength: 'Extremely aggressive',\n    weakness: 'Using the Ouija board to ask questions does not drain sanity',\n  },\n\n  {\n    name: 'Jinn',\n    evidences: [EMF, SPIRIT_BOX, GHOST_ORB],\n    strength: 'Moves faster the further away you are from it',\n    weakness: 'Cutting off the location’s power supply will limit the Jinn’s speed',\n  },\n\n  {\n    name: 'Mare',\n    evidences: [TEMPERATURE, SPIRIT_BOX, GHOST_ORB],\n    strength: 'Attacks more frequently in the dark, tends to switch off lights',\n    weakness: 'Keeping the lights on',\n  },\n\n  {\n    name: 'Oni',\n    evidences: [EMF, GHOST_WRITING, SPIRIT_BOX],\n    strength: 'Extremely active and moves objects quickly',\n    weakness: 'Extreme activity with lots of players nearby makes it easy to identify',\n  },\n\n  {\n    name: 'Phantom',\n    evidences: [EMF, TEMPERATURE, GHOST_ORB],\n    strength: 'Looking at the Phantom will reduce your sanity',\n    weakness: 'Capturing a photo will cause it to disappear, not during a hunt',\n  },\n\n  {\n    name: 'Poltergeist',\n    evidences: [FINGERPRINTS, SPIRIT_BOX, GHOST_ORB],\n    strength: 'Throws multiple objects about at once',\n    weakness: 'Rooms without any stuff in to throw',\n  },\n\n  {\n    name: 'Revenant',\n    evidences: [EMF, FINGERPRINTS, GHOST_WRITING],\n    strength: 'Attacks anyone, regardless of sanity levels',\n    weakness: 'Moves extremely slowly when players hide',\n  },\n\n  {\n    name: 'Shade',\n    evidences: [EMF, GHOST_WRITING, GHOST_ORB],\n    strength: 'Minimal activity, hard to find and detect',\n    weakness: 'Does not hunt if players are in a group',\n  },\n\n  {\n    name: 'Spirit',\n    evidences: [FINGERPRINTS, GHOST_WRITING, SPIRIT_BOX],\n    strength: 'No strengths',\n    weakness: 'Using smudge sticks stops from starting for a long time',\n  },\n\n  {\n    name: 'Wraith',\n    evidences: [FINGERPRINTS, TEMPERATURE, SPIRIT_BOX],\n    strength: 'Can fly through walls and does not leave footprints',\n    weakness: 'Salt is toxic for Wraith',\n  },\n\n  {\n    name: 'Yurei',\n    evidences: [TEMPERATURE, GHOST_WRITING, GHOST_ORB],\n    strength: 'Drains player sanity especially quickly',\n    weakness: 'Smudge stick in the same room will stop the Yurei from moving',\n  },\n];\n\nexport default ghosts;\n","import { filter, find, difference } from 'lodash';\nimport Cookies from 'universal-cookie';\n\nconst cookies = new Cookies();\n\nexport const filterGhostsByEvidences = (ghosts, evidences) => (\n  filter(ghosts, (ghost) => difference(evidences, ghost.evidences).length === 0)\n);\n\nexport const setSessionId = (value) => {\n  cookies.set('sessionId', value, { maxAge: 28800 });\n};\n\nexport const getSessionId = () => cookies.get('sessionId');\n\nexport const resetSessionId = () => cookies.remove('sessionId');\n\nexport const getSessionById = (id, objects) => (\n  find(objects, (el) => el.sessionId === id) || ''\n);\n","import { remove } from 'lodash';\n\nimport {\n  FILTER_GHOSTS, UPDATE_SELECTED_QUESTS,\n  UPDATE_GHOST_NAME, RESET_PICKER, UPDATE_ANSWERS_EVERYONE_BUTTON,\n  SET_PICKER_STATE,\n} from '../actions';\n\nimport ghosts from '../data/ghosts';\n\nimport {\n  EMF, FINGERPRINTS, TEMPERATURE,\n  GHOST_WRITING, SPIRIT_BOX, GHOST_ORB,\n} from '../data/evidences';\n\nimport {\n  EMF as EMF_QUEST, TEMPERATURE as TEMPERATURE_QUEST,\n  CRUCIFIX, EVENT, MOTION, PHOTO, SINK, SMUDGE,\n} from '../data/quests';\n\nimport { filterGhostsByEvidences } from '../utils';\n\nconst defaultState = {\n  selectedEvidences: [],\n  ghosts,\n  evidenceButtons: {\n    [EMF]: false,\n    [FINGERPRINTS]: false,\n    [TEMPERATURE]: false,\n    [GHOST_WRITING]: false,\n    [SPIRIT_BOX]: false,\n    [GHOST_ORB]: false,\n  },\n  questButtons: {\n    [SINK]: false,\n    [PHOTO]: false,\n    [MOTION]: false,\n    [TEMPERATURE_QUEST]: false,\n    [CRUCIFIX]: false,\n    [EMF_QUEST]: false,\n    [SMUDGE]: false,\n    [EVENT]: false,\n  },\n  talksToEveryOne: false,\n  ghostName: '',\n};\n\nconst picker = (state = defaultState, action) => {\n  switch (action.type) {\n    case FILTER_GHOSTS: {\n      const { evidence, isActive } = action;\n      const { selectedEvidences } = state;\n\n      const updatedButtonsState = {\n        ...state.evidenceButtons,\n        [evidence]: isActive,\n      };\n\n      if (isActive) {\n        selectedEvidences.push(evidence);\n\n        const filteredGhosts = filterGhostsByEvidences(ghosts, selectedEvidences);\n\n        return {\n          ...state,\n          ghosts: filteredGhosts,\n          selectedEvidences,\n          evidenceButtons: updatedButtonsState,\n        };\n      }\n\n      remove(selectedEvidences, (el) => el === evidence);\n\n      const filteredGhosts = filterGhostsByEvidences(ghosts, selectedEvidences);\n\n      return {\n        ...state,\n        ghosts: filteredGhosts,\n        selectedEvidences,\n        evidenceButtons: updatedButtonsState,\n      };\n    }\n\n    case UPDATE_GHOST_NAME: {\n      const { name } = action;\n\n      return {\n        ...state,\n        ghostName: name,\n      };\n    }\n\n    case UPDATE_SELECTED_QUESTS: {\n      const { quest, isActive } = action;\n\n      return {\n        ...state,\n        questButtons: {\n          ...state.questButtons,\n          [quest]: isActive,\n        },\n      };\n    }\n\n    case UPDATE_ANSWERS_EVERYONE_BUTTON: {\n      const { isActive } = action;\n\n      return {\n        ...state,\n        talksToEveryOne: isActive,\n      };\n    }\n\n    case RESET_PICKER: {\n      return {\n        ...defaultState,\n        selectedEvidences: [],\n      };\n    }\n\n    case SET_PICKER_STATE: {\n      const { data } = action;\n      const { selectedEvidences = [] } = data;\n\n      return {\n        ...state,\n        ...data,\n        selectedEvidences,\n        ghosts: filterGhostsByEvidences(ghosts, selectedEvidences),\n      };\n    }\n\n    default:\n      return state;\n  }\n};\n\nexport default picker;\n","export const SINK = 'Sink';\nexport const PHOTO = 'Photo';\nexport const EVENT = 'Event';\nexport const MOTION = 'Motion';\nexport const TEMPERATURE = 'Temperature';\nexport const CRUCIFIX = 'Crucifix';\nexport const EMF = 'EMF';\nexport const SMUDGE = 'Smudge';\n","import { combineReducers } from 'redux';\n\nimport app from './app';\nimport picker from './picker';\n\nexport default combineReducers({\n  app,\n  picker,\n});\n","import firebase from 'firebase/app';\nimport 'firebase/database';\n\nconst config = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_API_DOMAIN,\n  databaseURL: process.env.REACT_APP_FIREBASE_DB_URL,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSANGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APPID,\n};\n\nfirebase.initializeApp(config);\n\nexport default firebase.database();\n","import firebase from '../firebase';\n\nclass FirebaseDataService {\n  getSessionById(sessionId) {\n    return firebase.ref()\n      .orderByChild('sessionId')\n      .equalTo(sessionId)\n      .once('value');\n  }\n\n  createSession(session) {\n    return firebase.ref().push(session);\n  }\n\n  updateSession(key, value) {\n    return firebase.ref().child(key).update(value);\n  }\n\n  removeSession(key) {\n    return firebase.ref().child(key).remove();\n  }\n\n  getRef() {\n    return firebase.ref();\n  }\n}\n\nexport default new FirebaseDataService();\n","export const pageSelector = (state) => state.app.page;\n\nexport const sessionIdSelector = (state) => state.app.sessionId;\n\nexport const sessionKeySelector = (state) => state.app.sessionKey;\n\nexport const selectedEvidencesSelector = (state) => state.picker.selectedEvidences;\n\nexport const questButtonsStateSelector = (state) => state.picker.questButtons;\n\nexport const isActiveButtonSelector = (state, type, name) => {\n  switch (type) {\n    case 'evidence': {\n      return state.picker.evidenceButtons[name];\n    }\n\n    case 'quest': {\n      return state.picker.questButtons[name];\n    }\n\n    case 'talksToEveryOne': {\n      return state.picker.talksToEveryOne;\n    }\n\n    default: {\n      return false;\n    }\n  }\n};\n\nexport const pickerStateSelector = (state) => state.picker;\n","import {\n  call, put, takeEvery, select, takeLatest,\n} from 'redux-saga/effects';\n\nimport firebaseDataService from '../services/firebaseData';\nimport { sessionKeySelector, pickerStateSelector, sessionIdSelector } from '../selectors';\nimport { getSessionById } from '../utils';\n\nimport {\n  ENTER_APP, RESET_SESSION, UPDATE_ANSWERS_EVERYONE_BUTTON,\n  UPDATE_SELECTED_QUESTS, UPDATE_GHOST_NAME, FILTER_GHOSTS, RESET_PICKER,\n  setPickerState, resetSessionComplete, resetPicker, setSessionKey,\n} from '../actions';\n\nfunction* enterApp(action) {\n  const { sessionId } = action;\n\n  if (sessionId !== '') {\n    const data = yield call(firebaseDataService.getSessionById, sessionId);\n    const session = getSessionById(sessionId, data.val());\n\n    if (session) {\n      const key = Object.keys(data.val())[0];\n      yield put(setPickerState(session));\n      yield put(setSessionKey(key));\n    }\n  }\n}\n\nfunction* removeSession() {\n  const key = yield select(sessionKeySelector);\n\n  if (key) {\n    yield call(firebaseDataService.removeSession, key);\n  }\n\n  yield put(resetSessionComplete());\n  yield put(resetPicker());\n}\n\nfunction* handlePickerChange() {\n  const sessionKey = yield select(sessionKeySelector);\n  const sessionId = yield select(sessionIdSelector);\n  const picker = yield select(pickerStateSelector);\n\n  const {\n    selectedEvidences, evidenceButtons, questButtons,\n    talksToEveryOne, ghostName,\n  } = picker;\n\n  const objectToStore = {\n    sessionId,\n    selectedEvidences,\n    evidenceButtons,\n    questButtons,\n    talksToEveryOne,\n    ghostName,\n  };\n\n  if (sessionKey && sessionId !== '') {\n    yield call(firebaseDataService.updateSession, sessionKey, objectToStore);\n    return;\n  }\n\n  if (!sessionKey && sessionId.length > 0) {\n    const newSessionKey = yield call(firebaseDataService.createSession, objectToStore);\n    yield put(setSessionKey(newSessionKey.key));\n  }\n}\n\nfunction* rootSaga() {\n  yield takeEvery(ENTER_APP, enterApp);\n  yield takeEvery(RESET_SESSION, removeSession);\n  yield takeLatest([\n    UPDATE_GHOST_NAME,\n    UPDATE_SELECTED_QUESTS,\n    UPDATE_ANSWERS_EVERYONE_BUTTON,\n    FILTER_GHOSTS,\n    RESET_PICKER,\n  ], handlePickerChange);\n}\n\nexport default rootSaga;\n","import { createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport reducer from './reducers';\nimport rootSaga from './sagas';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(\n  reducer,\n  composeWithDevTools(applyMiddleware(sagaMiddleware)),\n);\n\nsagaMiddleware.run(rootSaga);\n\nexport default store;\n","import { makeStyles } from '@material-ui/core/styles';\n\nexport default makeStyles({\n  button: {\n    color: (props) => props.color,\n    margin: '0 5px',\n  },\n\n  buttonSelected: {\n    color: (props) => props.color,\n    border: '2px solid red',\n    margin: '0 2px',\n  },\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\n\nimport { Button } from '@material-ui/core';\n\nimport useStyles from './styles';\n\nimport { isActiveButtonSelector } from '../../../selectors';\n\nconst CustomButton = ({\n  type, text, handleClick, ...props\n}) => {\n  const css = useStyles(props);\n\n  const isActive = useSelector((state) => isActiveButtonSelector(state, type, text));\n\n  return (\n    <Button\n      className={isActive ? css.buttonSelected : css.button}\n      onClick={() => handleClick(text, !isActive)}\n    >\n      {text}\n    </Button>\n  );\n};\n\nCustomButton.propTypes = {\n  type: PropTypes.string.isRequired,\n  text: PropTypes.string.isRequired,\n  handleClick: PropTypes.func.isRequired,\n};\n\nexport default CustomButton;\n","import { makeStyles } from '@material-ui/core/styles';\n\nexport default makeStyles(() => ({\n  root: {\n    width: 200,\n    padding: 20,\n  },\n\n  content: {\n    display: 'flex',\n    alignItems: 'center',\n  },\n\n  accent: {\n    color: 'green',\n  },\n\n  header: {\n    color: 'red',\n  },\n}));\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport Fade from '@material-ui/core/Fade';\n\nimport useStyles from './styles';\n\nconst GhostCard = ({ data, selectedEvidences }) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const css = useStyles();\n\n  const {\n    name, strength, weakness, evidences,\n  } = data;\n\n  useEffect(() => {\n    setIsOpen(true);\n\n    return (() => {\n      setIsOpen(false);\n    });\n  }, []);\n\n  return (\n    <Fade in={isOpen} timeout={1000}>\n      <Box className={css.root}>\n        <Typography variant=\"h4\" className={css.header}>{name}</Typography>\n        <Typography variant=\"h6\" color=\"secondary\">Evidences</Typography>\n        {\n          evidences.map((el) => (\n            <Box key={el}>\n              <Typography className={selectedEvidences.includes(el) ? css.accent : ''}>{el}</Typography>\n            </Box>\n          ))\n        }\n        <Typography variant=\"h6\">Strength</Typography>\n        <Typography className={css.content}>{strength}</Typography>\n        <Typography variant=\"h6\">Weakness</Typography>\n        <Typography className={css.content}>{weakness}</Typography>\n      </Box>\n    </Fade>\n  );\n};\n\nGhostCard.propTypes = {\n  data: PropTypes.shape({\n    name: PropTypes.string,\n    evidences: PropTypes.arrayOf(PropTypes.string).isRequired,\n    strength: PropTypes.string.isRequired,\n    weakness: PropTypes.string.isRequired,\n  }).isRequired,\n  selectedEvidences: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nexport default GhostCard;\n","import { makeStyles } from '@material-ui/core';\n\nexport default makeStyles(({ palette }) => ({\n  wrapper: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'flex-start',\n    width: '100%',\n    minHeight: '100%',\n    padding: 0,\n    background: palette.primary.main,\n    color: palette.primary.contrastText,\n  },\n\n  inputWrapper: {\n    display: 'flex',\n    justifyContent: 'center',\n    padding: '20px 20px',\n    flexWrap: 'wrap',\n  },\n\n  evidencesButtonsWrapper: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: '20px px',\n    flexWrap: 'wrap',\n  },\n\n  ghostsWrapper: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    alignContent: 'center',\n    justifyContent: 'center',\n    padding: '0 50px',\n  },\n\n  noEvidenceWrapper: {\n    padding: 50,\n  },\n\n  header: {\n    width: '100%',\n    display: 'flex',\n    justifyContent: 'center',\n    marginTop: 40,\n  },\n\n  sessionControls: {\n    display: 'flex',\n    height: 40,\n    width: '100%',\n    background: 'rgba(33, 33, 33, .6)',\n    justifyContent: 'flex-end',\n    position: 'fixed',\n    zIndex: 10,\n  },\n\n  sessionIdWrapper: {\n    display: 'flex',\n    alignItems: 'center',\n    marginRight: 5,\n  },\n}));\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { isEmpty } from 'lodash';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport Slide from '@material-ui/core/Slide';\nimport Box from '@material-ui/core/Box';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\n\nimport {\n  EMF, FINGERPRINTS, TEMPERATURE,\n  GHOST_WRITING, SPIRIT_BOX, GHOST_ORB,\n} from '../../data/evidences';\n\nimport {\n  EMF as EMF_QUEST, TEMPERATURE as TEMPERATURE_QUEST,\n  CRUCIFIX, EVENT, MOTION, PHOTO, SINK, SMUDGE,\n} from '../../data/quests';\n\nimport { pickerStateSelector, sessionIdSelector } from '../../selectors';\n\nimport {\n  updateGhostName, filterGhosts, updateSelectedQuests,\n  resetPicker, updateAnswersEveryoneButton, setPickerState,\n} from '../../actions';\n\nimport firebaseDataService from '../../services/firebaseData';\n\nimport CustomButton from './Buttons/CustomButton';\nimport GhostCard from './GhostCard';\n\nimport useStyles from './styles';\n\nconst Picker = ({ changePage, resetSession }) => {\n  const dispatch = useDispatch();\n  const css = useStyles();\n\n  const pickerState = useSelector((state) => pickerStateSelector(state));\n  const sessionId = useSelector((state) => sessionIdSelector(state));\n\n  useEffect(() => {\n    const syncData = (data) => {\n      const value = data.val();\n\n      if (value.sessionId === sessionId) {\n        dispatch(setPickerState(value));\n      }\n    };\n\n    firebaseDataService.getRef().on('child_changed', (data) => {\n      syncData(data);\n    });\n\n    firebaseDataService.getRef().on('child_added', (data) => {\n      syncData(data);\n      firebaseDataService.getRef().off('child_added', () => {});\n    });\n  }, [dispatch, sessionId]);\n\n  const handleGhostNameChange = (name) => {\n    dispatch(updateGhostName(name));\n  };\n\n  const handleEvidenceButtonClick = (evidence, isActive) => {\n    dispatch(filterGhosts(evidence, isActive));\n  };\n\n  const handleQuestButtonClick = (quest, isActive) => {\n    dispatch(updateSelectedQuests(quest, isActive));\n  };\n\n  const handleAnswersEveryoneButton = (text, isActive) => {\n    dispatch(updateAnswersEveryoneButton(isActive));\n  };\n\n  const handleReset = () => {\n    dispatch(resetPicker());\n  };\n\n  const { ghostName, ghosts, selectedEvidences } = pickerState;\n\n  return (\n    <Slide direction=\"right\" in mountOnEnter unmountOnExit>\n      <Box className={css.wrapper}>\n        <Box className={css.sessionControls}>\n          {\n            sessionId !== '' && (\n              <Box className={css.sessionIdWrapper}>\n                <Typography>{`Session id: ${sessionId}`}</Typography>\n              </Box>\n            )\n          }\n          <Tooltip title=\"Exit room\">\n            <IconButton onClick={() => resetSession()}>\n              <ExitToAppIcon />\n            </IconButton>\n          </Tooltip>\n          <Tooltip title=\"To questions\">\n            <IconButton onClick={() => changePage('questions')}>\n              <ArrowForwardIosIcon />\n            </IconButton>\n          </Tooltip>\n        </Box>\n        <Box className={css.header}>\n          <Typography variant=\"h3\">Ghost Picker</Typography>\n        </Box>\n        <Box className={css.inputWrapper}>\n          <TextField\n            id=\"ghost-name\"\n            label=\"Ghost Name\"\n            variant=\"outlined\"\n            value={ghostName}\n            onChange={(e) => handleGhostNameChange(e.target.value)}\n          />\n          <CustomButton type=\"talksToEveryOne\" color=\"grey\" text=\"Answers everyone\" handleClick={handleAnswersEveryoneButton} />\n          <CustomButton type=\"reset\" color=\"grey\" text=\"Reset\" handleClick={handleReset} />\n        </Box>\n        <Typography variant=\"h4\">Evidences</Typography>\n        <Box className={css.evidencesButtonsWrapper}>\n          <CustomButton type=\"evidence\" color=\"red\" text={EMF} handleClick={handleEvidenceButtonClick} />\n          <CustomButton type=\"evidence\" color=\"green\" text={FINGERPRINTS} handleClick={handleEvidenceButtonClick} />\n          <CustomButton type=\"evidence\" color=\"blue\" text={TEMPERATURE} handleClick={handleEvidenceButtonClick} />\n          <CustomButton type=\"evidence\" color=\"purple\" text={GHOST_WRITING} handleClick={handleEvidenceButtonClick} />\n          <CustomButton type=\"evidence\" color=\"grey\" text={SPIRIT_BOX} handleClick={handleEvidenceButtonClick} />\n          <CustomButton type=\"evidence\" color=\"brown\" text={GHOST_ORB} handleClick={handleEvidenceButtonClick} />\n        </Box>\n        <Typography variant=\"h4\">Quests</Typography>\n        <Box className={css.evidencesButtonsWrapper}>\n          <CustomButton type=\"quest\" color=\"grey\" text={CRUCIFIX} handleClick={handleQuestButtonClick} />\n          <CustomButton type=\"quest\" color=\"grey\" text={EVENT} handleClick={handleQuestButtonClick} />\n          <CustomButton type=\"quest\" color=\"grey\" text={MOTION} handleClick={handleQuestButtonClick} />\n          <CustomButton type=\"quest\" color=\"grey\" text={PHOTO} handleClick={handleQuestButtonClick} />\n          <CustomButton type=\"quest\" color=\"grey\" text={EMF_QUEST} handleClick={handleQuestButtonClick} />\n          <CustomButton type=\"quest\" color=\"grey\" text={SINK} handleClick={handleQuestButtonClick} />\n          <CustomButton type=\"quest\" color=\"grey\" text={SMUDGE} handleClick={handleQuestButtonClick} />\n          <CustomButton type=\"quest\" color=\"grey\" text={TEMPERATURE_QUEST} handleClick={handleQuestButtonClick} />\n        </Box>\n        <Box className={css.ghostsWrapper}>\n          {\n            ghosts.map((ghost) => (\n              <GhostCard data={ghost} key={ghost.name} selectedEvidences={selectedEvidences} />\n            ))\n          }\n          {\n            isEmpty(ghosts) ? (\n              <Box className={css.noEvidenceWrapper}>\n                <Typography variant=\"h6\">\n                  No ghosts with such combination of evidences\n                </Typography>\n              </Box>\n            ) : null\n          }\n        </Box>\n      </Box>\n    </Slide>\n  );\n};\n\nPicker.propTypes = {\n  changePage: PropTypes.func.isRequired,\n  resetSession: PropTypes.func.isRequired,\n};\n\nexport default Picker;\n","import { makeStyles } from '@material-ui/core';\n\nexport default makeStyles(({ palette }) => ({\n  wrapper: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'flex-start',\n    width: '100%',\n    minHeight: '100%',\n    padding: '20px 0',\n    background: palette.primary.main,\n    color: palette.primary.contrastText,\n    overflowX: 'hidden',\n  },\n\n  changePageButtonWrapper: {\n    width: '100%',\n    display: 'flex',\n    justifyContent: 'flex-start',\n    paddingBottom: 10,\n  },\n\n  icon: {\n    position: 'absolute',\n  },\n\n  pageLabel: {\n    margin: '0 auto',\n  },\n\n  questionsWrapper: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    width: '100%',\n    alignItems: 'flex-start',\n    justifyContent: 'space-around',\n    '@media screen and (max-width: 880px)': {\n      justifyContent: 'flex-start',\n    },\n  },\n\n  columnWrapper: {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'flex-start',\n    padding: '0 30px',\n  },\n\n  header: {\n    color: 'red',\n  },\n}));\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Box from '@material-ui/core/Box';\nimport IconButton from '@material-ui/core/IconButton';\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\nimport Slide from '@material-ui/core/Slide';\nimport Fade from '@material-ui/core/Fade';\nimport Typography from '@material-ui/core/Typography';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nimport useStyles from './styles';\n\nimport questions from '../../data/questions.json';\n\nconst Questions = ({ changePage }) => {\n  const css = useStyles();\n\n  return (\n    <Slide direction=\"left\" in mountOnEnter unmountOnExit>\n      <Box className={css.wrapper}>\n        <Box className={css.changePageButtonWrapper}>\n          <Tooltip title=\"To Picker\">\n            <IconButton onClick={() => changePage('picker')} className={css.icon}>\n              <ArrowBackIosIcon />\n            </IconButton>\n          </Tooltip>\n          <Typography variant=\"h3\" className={css.pageLabel}>Questions</Typography>\n        </Box>\n        <Box className={css.questionsWrapper}>\n          {\n            Object.keys(questions).map((key) => (\n              <Fade in timeout={1000} key={key}>\n                <Box className={css.columnWrapper} key={key}>\n                  <Typography variant=\"h4\" className={css.header} key={key}>{key}</Typography>\n                  {\n                    questions[key].map((el) => (\n                      <Typography key={el}>{el}</Typography>\n                    ))\n                  }\n                </Box>\n              </Fade>\n            ))\n          }\n        </Box>\n      </Box>\n    </Slide>\n  );\n};\n\nQuestions.propTypes = {\n  changePage: PropTypes.func.isRequired,\n};\n\nexport default Questions;\n","import { makeStyles } from '@material-ui/core';\n\nexport default makeStyles(({ palette }) => ({\n  wrapper: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center',\n    width: '100%',\n    minHeight: '100%',\n    padding: '20px 0',\n    background: palette.primary.main,\n    color: palette.primary.contrastText,\n  },\n\n  inputWrapper: {\n    display: 'flex',\n    flexDirection: 'column',\n    margin: '10px 20px 10px 20px',\n  },\n\n  submitButton: {\n    marginTop: 5,\n  },\n}));\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport Box from '@material-ui/core/Box';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\n\nimport { enterApp } from '../../actions';\nimport { setSessionId } from '../../utils';\n\nimport useStyles from './styles';\n\nconst Login = () => {\n  const dispatch = useDispatch();\n  const css = useStyles();\n\n  const [sessionId, changeSessionId] = useState('');\n  const [error, setError] = useState(null);\n\n  const validate = (value) => {\n    if (value.length > 8) {\n      setError('Value is too long (max 8)');\n      return false;\n    }\n\n    return true;\n  };\n\n  const handleSessionIdChange = (value) => {\n    setError(null);\n    changeSessionId(value);\n  };\n\n  const handleClick = (e) => {\n    e.preventDefault();\n    const sessionIdNormalized = sessionId.replace(' ', '');\n\n    if (validate(sessionIdNormalized)) {\n      dispatch(enterApp('picker', sessionIdNormalized));\n      setSessionId(sessionIdNormalized);\n    }\n  };\n\n  return (\n    <Box className={css.wrapper}>\n      <Typography variant=\"h5\">Enter your session id</Typography>\n      <Typography>Or leave it blank if you are playing solo.</Typography>\n      <form className={css.inputWrapper} noValidate autoComplete=\"off\">\n        <TextField\n          id=\"sessionID\"\n          label=\"Session ID\"\n          variant=\"outlined\"\n          value={sessionId}\n          error={!!error}\n          helperText={error}\n          onChange={(e) => handleSessionIdChange(e.target.value)}\n        />\n        <Button className={css.submitButton} type=\"submit\" onClick={handleClick}>Go</Button>\n      </form>\n    </Box>\n  );\n};\n\nexport default Login;\n","// import { createMuiTheme } from '@material-ui/core/styles';\nimport { unstable_createMuiStrictModeTheme as createMuiTheme } from '@material-ui/core';\nimport grey from '@material-ui/core/colors/grey';\n\nexport default createMuiTheme({\n  palette: {\n    type: 'dark',\n\n    primary: {\n      main: grey[900],\n    },\n\n    secondary: {\n      main: grey[50],\n    },\n  },\n\n  overrides: {\n    MuiTypography: {\n      body1: {\n        // fontSize: '.8vw',\n        fontFamily: 'SyneMono',\n        '@media screen and (max-width: 1000px)': {\n          // fontSize: '3vw',\n        },\n      },\n\n      h3: {\n        fontFamily: 'Teko-Medium',\n      },\n\n      h4: {\n        fontFamily: 'Teko-Medium',\n      },\n\n      h5: {\n        fontFamily: 'Teko-Medium',\n      },\n\n      h6: {\n        fontFamily: 'Teko-Medium',\n      },\n    },\n  },\n});\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ThemeProvider } from '@material-ui/core/styles';\n\nimport {\n  changePage, enterApp,\n  resetSession,\n} from '../actions';\n\nimport { pageSelector } from '../selectors';\n\nimport { getSessionId, resetSessionId } from '../utils';\n\nimport Picker from './Picker';\nimport Questions from './Questions';\nimport Login from './Login';\n\nimport theme from './theme';\n\nconst App = () => {\n  const dispatch = useDispatch();\n\n  const page = useSelector((state) => pageSelector(state));\n\n  useEffect(() => {\n    const sessionId = getSessionId();\n\n    if (sessionId) {\n      dispatch(enterApp('picker', sessionId));\n    }\n  }, [dispatch]);\n\n  useEffect(() => {\n    const onAppExit = () => dispatch(resetSession());\n\n    window.addEventListener('beforeunload', onAppExit);\n\n    return () => {\n      window.removeEventListener('beforeunload', onAppExit);\n    };\n  }, [dispatch]);\n\n  const handleChangePage = (newPage) => {\n    dispatch(changePage(newPage));\n  };\n\n  const handleSessionReset = () => {\n    resetSessionId();\n    dispatch(resetSession());\n  };\n\n  const renderPage = () => {\n    switch (page) {\n      case 'picker':\n        return (\n          <Picker\n            changePage={handleChangePage}\n            resetSession={handleSessionReset}\n          />\n        );\n      case 'questions':\n        return <Questions changePage={handleChangePage} />;\n      default:\n        return (\n          <Login />\n        );\n    }\n  };\n\n  return (\n    <ThemeProvider theme={theme}>\n      {renderPage()}\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport store from './store';\n\nimport App from './components/App';\n\nimport './index.css';\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}