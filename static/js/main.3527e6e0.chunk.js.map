{"version":3,"sources":["data/evidences.js","components/Picker/EvidenceButton/styles.js","components/Picker/EvidenceButton/index.jsx","components/Picker/GhostCard/styles.js","components/Picker/GhostCard/index.jsx","components/Picker/styles.js","components/Picker/index.jsx","data/quests.js","components/Questions/styles.js","components/Questions/index.jsx","components/theme.js","data/ghosts.js","utils/index.js","components/App.jsx","index.jsx"],"names":["EMF","makeStyles","button","color","props","margin","buttonSelected","border","EvidenceButton","text","handleClick","isActive","css","useStyles","Button","className","onClick","defaultProps","root","width","padding","content","display","alignItems","accent","header","GhostCard","data","selectedEvidences","useState","isOpen","setIsOpen","name","strength","weakness","evidences","useEffect","Fade","in","timeout","Box","Typography","variant","map","el","key","includes","palette","wrapper","flexDirection","justifyContent","minHeight","background","primary","main","contrastText","inputWrapper","flexWrap","evidencesButtonsWrapper","ghostsWrapper","alignContent","noEvidenceWrapper","changePageButtonWrapper","pageLabel","Picker","changePage","updateGhostName","updateSelectedEvidences","handleAnswersButton","ghostName","filteredGhosts","buttonsState","resetPicker","handleQuestButton","questButtonsState","Slide","direction","mountOnEnter","unmountOnExit","IconButton","TextField","id","label","value","onChange","e","target","talksToEveryOne","ghost","isEmpty","overflowX","paddingBottom","questionsWrapper","columnWrapper","Questions","Object","keys","questions","createMuiTheme","type","grey","secondary","overrides","MuiTypography","body1","fontFamily","h4","h5","h6","ghosts","filterGhostsByEvidences","filter","difference","length","initialButtonsState","initialQuestButtonsState","App","page","setPage","setSelectedEvidences","filterGhosts","buttons","updateButtons","questButtons","updateQuestButtons","changeGhostName","currentState","push","remove","filtered","newPage","ThemeProvider","theme","renderPage","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3527e6e0.chunk.js","sourcesContent":["export const EMF = 'EMF';\nexport const FINGERPRINTS = 'Fingerprints';\nexport const TEMPERATURE = 'Temperature';\nexport const GHOST_WRITING = 'Ghost Writing';\nexport const SPIRIT_BOX = 'Spirit Box';\nexport const GHOST_ORB = 'Ghost Orb';\n","import { makeStyles } from '@material-ui/core/styles';\n\nexport default makeStyles({\n  button: {\n    color: (props) => props.color,\n    margin: '0 5px',\n  },\n\n  buttonSelected: {\n    color: (props) => props.color,\n    border: '2px solid red',\n    margin: '0 2px',\n  },\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Button } from '@material-ui/core';\n\nimport useStyles from './styles';\n\nconst EvidenceButton = ({\n  text, handleClick, isActive, ...props\n}) => {\n  const css = useStyles(props);\n\n  return (\n    <Button\n      className={isActive ? css.buttonSelected : css.button}\n      onClick={() => handleClick(text, !isActive)}\n    >\n      {text}\n    </Button>\n  );\n};\n\nEvidenceButton.propTypes = {\n  text: PropTypes.string.isRequired,\n  isActive: PropTypes.bool.isRequired,\n  handleClick: PropTypes.func,\n};\n\nEvidenceButton.defaultProps = {\n  handleClick: () => null,\n};\n\nexport default EvidenceButton;\n","import { makeStyles } from '@material-ui/core/styles';\n\nexport default makeStyles(() => ({\n  root: {\n    width: 200,\n    padding: 20,\n  },\n\n  content: {\n    display: 'flex',\n    alignItems: 'center',\n  },\n\n  accent: {\n    color: 'green',\n  },\n\n  header: {\n    color: 'red',\n  },\n}));\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport Fade from '@material-ui/core/Fade';\n\nimport useStyles from './styles';\n\nconst GhostCard = ({ data, selectedEvidences }) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const css = useStyles();\n\n  const {\n    name, strength, weakness, evidences,\n  } = data;\n\n  useEffect(() => {\n    setIsOpen(true);\n\n    return (() => {\n      setIsOpen(false);\n    });\n  }, []);\n\n  return (\n    <Fade in={isOpen} timeout={1000}>\n      <Box className={css.root}>\n        <Typography variant=\"h4\" className={css.header}>{name}</Typography>\n        <Typography variant=\"h6\" color=\"secondary\">Evidences</Typography>\n        {\n          evidences.map((el) => (\n            <Box key={el}>\n              <Typography className={selectedEvidences.includes(el) ? css.accent : ''}>{el}</Typography>\n            </Box>\n          ))\n        }\n        <Typography variant=\"h6\">Strength</Typography>\n        <Typography className={css.content}>{strength}</Typography>\n        <Typography variant=\"h6\">Weakness</Typography>\n        <Typography className={css.content}>{weakness}</Typography>\n      </Box>\n    </Fade>\n  );\n};\n\nGhostCard.propTypes = {\n  data: PropTypes.shape({\n    name: PropTypes.string,\n    evidences: PropTypes.arrayOf(PropTypes.string).isRequired,\n    strength: PropTypes.string.isRequired,\n    weakness: PropTypes.string.isRequired,\n  }).isRequired,\n  selectedEvidences: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nexport default GhostCard;\n","import { makeStyles } from '@material-ui/core';\n\nexport default makeStyles(({ palette }) => ({\n  wrapper: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'flex-start',\n    width: '100%',\n    minHeight: '100%',\n    padding: '20px 0',\n    background: palette.primary.main,\n    color: palette.primary.contrastText,\n  },\n\n  inputWrapper: {\n    display: 'flex',\n    justifyContent: 'center',\n    padding: '20px 20px',\n    flexWrap: 'wrap',\n  },\n\n  evidencesButtonsWrapper: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: '20px px',\n    flexWrap: 'wrap',\n  },\n\n  ghostsWrapper: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    alignContent: 'center',\n    justifyContent: 'center',\n    padding: '0 50px',\n  },\n\n  noEvidenceWrapper: {\n    padding: 50,\n  },\n\n  changePageButtonWrapper: {\n    width: '100%',\n    display: 'flex',\n    justifyContent: 'flex-end',\n  },\n\n  pageLabel: {\n    margin: '0 auto',\n  },\n}));\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { isEmpty } from 'lodash';\n\nimport Box from '@material-ui/core/Box';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\nimport Slide from '@material-ui/core/Slide';\n\nimport {\n  EMF, FINGERPRINTS, TEMPERATURE,\n  GHOST_WRITING, SPIRIT_BOX, GHOST_ORB,\n} from '../../data/evidences';\n\nimport {\n  EMF as EMF_QUEST, TEMPERATURE as TEMPERATURE_QUEST,\n  CRUCIFIX, EVENT, MOTION, PHOTO, SINK, SMUDGE,\n} from '../../data/quests';\n\nimport EvidenceButton from './EvidenceButton';\nimport GhostCard from './GhostCard';\n\nimport useStyles from './styles';\n\nconst Picker = ({\n  changePage, updateGhostName, updateSelectedEvidences, handleAnswersButton,\n  selectedEvidences, ghostName, filteredGhosts, buttonsState, resetPicker,\n  handleQuestButton, questButtonsState,\n}) => {\n  const css = useStyles();\n\n  return (\n    <Slide direction=\"right\" in mountOnEnter unmountOnExit>\n      <Box className={css.wrapper}>\n        <Box className={css.changePageButtonWrapper}>\n          <Typography variant=\"h4\" className={css.pageLabel}>Ghost Picker</Typography>\n          <IconButton onClick={() => changePage('questions')}>\n            <ArrowForwardIosIcon />\n          </IconButton>\n        </Box>\n        <Box className={css.inputWrapper}>\n          <TextField\n            id=\"ghost-name\"\n            label=\"Ghost Name\"\n            variant=\"outlined\"\n            value={ghostName}\n            onChange={(e) => updateGhostName(e.target.value)}\n          />\n          <EvidenceButton color=\"grey\" text=\"Answers everyone\" isActive={buttonsState.talksToEveryOne} handleClick={handleAnswersButton} />\n          <EvidenceButton color=\"grey\" text=\"Reset\" isActive={false} handleClick={resetPicker} />\n        </Box>\n        <Typography variant=\"h5\">Evidences</Typography>\n        <Box className={css.evidencesButtonsWrapper}>\n          <EvidenceButton color=\"red\" text={EMF} isActive={buttonsState[EMF]} handleClick={updateSelectedEvidences} />\n          <EvidenceButton color=\"green\" text={FINGERPRINTS} isActive={buttonsState[FINGERPRINTS]} handleClick={updateSelectedEvidences} />\n          <EvidenceButton color=\"blue\" text={TEMPERATURE} isActive={buttonsState[TEMPERATURE]} handleClick={updateSelectedEvidences} />\n          <EvidenceButton color=\"purple\" text={GHOST_WRITING} isActive={buttonsState[GHOST_WRITING]} handleClick={updateSelectedEvidences} />\n          <EvidenceButton color=\"grey\" text={SPIRIT_BOX} isActive={buttonsState[SPIRIT_BOX]} handleClick={updateSelectedEvidences} />\n          <EvidenceButton color=\"brown\" text={GHOST_ORB} isActive={buttonsState[GHOST_ORB]} handleClick={updateSelectedEvidences} />\n        </Box>\n        <Typography variant=\"h5\">Quests</Typography>\n        <Box className={css.evidencesButtonsWrapper}>\n          <EvidenceButton color=\"grey\" text={CRUCIFIX} isActive={questButtonsState[CRUCIFIX]} handleClick={handleQuestButton} />\n          <EvidenceButton color=\"grey\" text={EVENT} isActive={questButtonsState[EVENT]} handleClick={handleQuestButton} />\n          <EvidenceButton color=\"grey\" text={MOTION} isActive={questButtonsState[MOTION]} handleClick={handleQuestButton} />\n          <EvidenceButton color=\"grey\" text={PHOTO} isActive={questButtonsState[PHOTO]} handleClick={handleQuestButton} />\n          <EvidenceButton color=\"grey\" text={EMF_QUEST} isActive={questButtonsState[EMF_QUEST]} handleClick={handleQuestButton} />\n          <EvidenceButton color=\"grey\" text={SINK} isActive={questButtonsState[SINK]} handleClick={handleQuestButton} />\n          <EvidenceButton color=\"grey\" text={SMUDGE} isActive={questButtonsState[SMUDGE]} handleClick={handleQuestButton} />\n          <EvidenceButton color=\"grey\" text={TEMPERATURE_QUEST} isActive={questButtonsState[TEMPERATURE_QUEST]} handleClick={handleQuestButton} />\n        </Box>\n        <Box className={css.ghostsWrapper}>\n          {\n            filteredGhosts.map((ghost) => (\n              <GhostCard data={ghost} key={ghost.name} selectedEvidences={selectedEvidences} />\n            ))\n          }\n          {\n            isEmpty(filteredGhosts) ? (\n              <Box className={css.noEvidenceWrapper}>\n                <Typography variant=\"h6\">\n                  No ghosts with such combination of evidences\n                </Typography>\n              </Box>\n            ) : null\n          }\n        </Box>\n      </Box>\n    </Slide>\n  );\n};\n\nPicker.propTypes = {\n  ghostName: PropTypes.string.isRequired,\n  selectedEvidences: PropTypes.arrayOf(PropTypes.string).isRequired,\n  filteredGhosts: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  buttonsState: PropTypes.shape({ talksToEveryOne: PropTypes.bool }).isRequired,\n  questButtonsState: PropTypes.shape({ talksToEveryOne: PropTypes.bool }).isRequired,\n  updateGhostName: PropTypes.func.isRequired,\n  changePage: PropTypes.func.isRequired,\n  handleAnswersButton: PropTypes.func.isRequired,\n  handleQuestButton: PropTypes.func.isRequired,\n  updateSelectedEvidences: PropTypes.func.isRequired,\n  resetPicker: PropTypes.func.isRequired,\n};\n\nexport default Picker;\n","export const SINK = 'Sink';\nexport const PHOTO = 'Photo';\nexport const EVENT = 'Event';\nexport const MOTION = 'Motion';\nexport const TEMPERATURE = 'Temperature';\nexport const CRUCIFIX = 'Crucifix';\nexport const EMF = 'EMF';\nexport const SMUDGE = 'Smudge';\n","import { makeStyles } from '@material-ui/core';\n\nexport default makeStyles(({ palette }) => ({\n  wrapper: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'flex-start',\n    width: '100%',\n    minHeight: '100%',\n    padding: '20px 0',\n    background: palette.primary.main,\n    color: palette.primary.contrastText,\n    overflowX: 'hidden',\n  },\n\n  changePageButtonWrapper: {\n    width: '100%',\n    display: 'flex',\n    justifyContent: 'flex-start',\n    paddingBottom: 10,\n  },\n\n  pageLabel: {\n    margin: '0 auto',\n  },\n\n  questionsWrapper: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    width: '100%',\n    alignItems: 'flex-start',\n    justifyContent: 'space-around',\n    '@media screen and (max-width: 880px)': {\n      justifyContent: 'flex-start',\n    },\n  },\n\n  columnWrapper: {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'flex-start',\n    padding: '0 30px',\n  },\n\n  header: {\n    color: 'red',\n  },\n}));\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Box from '@material-ui/core/Box';\nimport IconButton from '@material-ui/core/IconButton';\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\nimport Slide from '@material-ui/core/Slide';\nimport Fade from '@material-ui/core/Fade';\nimport Typography from '@material-ui/core/Typography';\n\nimport useStyles from './styles';\n\nimport questions from '../../data/questions.json';\n\nconst Questions = ({ changePage }) => {\n  const css = useStyles();\n\n  return (\n    <Slide direction=\"left\" in mountOnEnter unmountOnExit>\n      <Box className={css.wrapper}>\n        <Box className={css.changePageButtonWrapper}>\n          <IconButton onClick={() => changePage('picker')}>\n            <ArrowBackIosIcon />\n          </IconButton>\n          <Typography variant=\"h4\" className={css.pageLabel}>Questions</Typography>\n        </Box>\n        <Box className={css.questionsWrapper}>\n          {\n            Object.keys(questions).map((key) => (\n              <Fade in timeout={1000} key={key}>\n                <Box className={css.columnWrapper} key={key}>\n                  <Typography variant=\"h4\" className={css.header} key={key}>{key}</Typography>\n                  {\n                    questions[key].map((el) => (\n                      <Typography key={el}>{el}</Typography>\n                    ))\n                  }\n                </Box>\n              </Fade>\n            ))\n          }\n        </Box>\n      </Box>\n    </Slide>\n  );\n};\n\nQuestions.propTypes = {\n  changePage: PropTypes.func.isRequired,\n};\n\nexport default Questions;\n","// import { createMuiTheme } from '@material-ui/core/styles';\nimport { unstable_createMuiStrictModeTheme as createMuiTheme } from '@material-ui/core';\nimport grey from '@material-ui/core/colors/grey';\n\nexport default createMuiTheme({\n  palette: {\n    type: 'dark',\n\n    primary: {\n      main: grey[900],\n    },\n\n    secondary: {\n      main: grey[50],\n    },\n  },\n\n  overrides: {\n    MuiTypography: {\n      body1: {\n        // fontSize: '.8vw',\n        fontFamily: 'SyneMono',\n        '@media screen and (max-width: 1000px)': {\n          // fontSize: '3vw',\n        },\n      },\n\n      h4: {\n        fontFamily: 'Teko-Medium',\n      },\n\n      h5: {\n        fontFamily: 'Teko-Medium',\n      },\n\n      h6: {\n        fontFamily: 'Teko-Medium',\n      },\n    },\n  },\n});\n","import {\n  EMF, FINGERPRINTS, TEMPERATURE,\n  GHOST_WRITING, GHOST_ORB, SPIRIT_BOX,\n} from './evidences';\n\nconst ghosts = [\n  {\n    name: 'Banshee',\n    evidences: [EMF, FINGERPRINTS, TEMPERATURE],\n    strength: 'Only targets one player at a time',\n    weakness: 'Hates the Crucifix',\n  },\n\n  {\n    name: 'Demon',\n    evidences: [TEMPERATURE, GHOST_WRITING, SPIRIT_BOX],\n    strength: 'Extremely aggressive',\n    weakness: 'Using the Ouija board to ask questions does not drain sanity',\n  },\n\n  {\n    name: 'Jinn',\n    evidences: [EMF, SPIRIT_BOX, GHOST_ORB],\n    strength: 'Moves faster the further away you are from it',\n    weakness: 'Cutting off the location’s power supply will limit the Jinn’s speed',\n  },\n\n  {\n    name: 'Mare',\n    evidences: [TEMPERATURE, SPIRIT_BOX, GHOST_ORB],\n    strength: 'Attacks more frequently in the dark, tends to switch off lights',\n    weakness: 'Keeping the lights on',\n  },\n\n  {\n    name: 'Oni',\n    evidences: [EMF, GHOST_WRITING, SPIRIT_BOX],\n    strength: 'Extremely active and moves objects quickly',\n    weakness: 'Extreme activity with lots of players nearby makes it easy to identify',\n  },\n\n  {\n    name: 'Phantom',\n    evidences: [EMF, TEMPERATURE, GHOST_ORB],\n    strength: 'Looking at the Phantom will reduce your sanity',\n    weakness: 'Capturing a photo will cause it to disappear, not during a hunt',\n  },\n\n  {\n    name: 'Poltergeist',\n    evidences: [FINGERPRINTS, SPIRIT_BOX, GHOST_ORB],\n    strength: 'Throws multiple objects about at once',\n    weakness: 'Rooms without any stuff in to throw',\n  },\n\n  {\n    name: 'Revenant',\n    evidences: [EMF, FINGERPRINTS, GHOST_WRITING],\n    strength: 'Attacks anyone, regardless of sanity levels',\n    weakness: 'Moves extremely slowly when players hide',\n  },\n\n  {\n    name: 'Shade',\n    evidences: [EMF, GHOST_WRITING, GHOST_ORB],\n    strength: 'Minimal activity, hard to find and detect',\n    weakness: 'Does not hunt if players are in a group',\n  },\n\n  {\n    name: 'Spirit',\n    evidences: [FINGERPRINTS, GHOST_WRITING, SPIRIT_BOX],\n    strength: 'No strengths',\n    weakness: 'Using smudge sticks stops from starting for a long time',\n  },\n\n  {\n    name: 'Wraith',\n    evidences: [FINGERPRINTS, TEMPERATURE, SPIRIT_BOX],\n    strength: 'Can fly through walls and does not leave footprints',\n    weakness: 'Salt is toxic for Wraith',\n  },\n\n  {\n    name: 'Yurei',\n    evidences: [TEMPERATURE, GHOST_WRITING, GHOST_ORB],\n    strength: 'Drains player sanity especially quickly',\n    weakness: 'Smudge stick in the same room will stop the Yurei from moving',\n  },\n];\n\nexport default ghosts;\n","import { filter, difference } from 'lodash';\n\nconst filterGhostsByEvidences = (ghosts, evidences) => (\n  filter(ghosts, (ghost) => difference(evidences, ghost.evidences).length === 0)\n);\n\nexport default filterGhostsByEvidences;\n","import React, { useState } from 'react';\nimport { remove } from 'lodash';\n\nimport { ThemeProvider } from '@material-ui/core/styles';\n\nimport Picker from './Picker';\nimport Questions from './Questions';\n\nimport theme from './theme';\nimport ghosts from '../data/ghosts';\nimport {\n  EMF, FINGERPRINTS, TEMPERATURE,\n  GHOST_WRITING, SPIRIT_BOX, GHOST_ORB,\n} from '../data/evidences';\n\nimport {\n  EMF as EMF_QUEST, TEMPERATURE as TEMPERATURE_QUEST,\n  CRUCIFIX, EVENT, MOTION, PHOTO, SINK, SMUDGE,\n} from '../data/quests';\n\nimport filterGhostsByEvidences from '../utils';\n\nconst initialButtonsState = {\n  [EMF]: false,\n  [FINGERPRINTS]: false,\n  [TEMPERATURE]: false,\n  [GHOST_WRITING]: false,\n  [SPIRIT_BOX]: false,\n  [GHOST_ORB]: false,\n  talksToEveryOne: false,\n};\n\nconst initialQuestButtonsState = {\n  [SINK]: false,\n  [PHOTO]: false,\n  [MOTION]: false,\n  [TEMPERATURE_QUEST]: false,\n  [CRUCIFIX]: false,\n  [EMF_QUEST]: false,\n  [SMUDGE]: false,\n  [EVENT]: false,\n};\n\nconst App = () => {\n  const [page, setPage] = useState('picker');\n\n  const [selectedEvidences, setSelectedEvidences] = useState([]);\n  const [filteredGhosts, filterGhosts] = useState(ghosts);\n  const [buttons, updateButtons] = useState(initialButtonsState);\n  const [questButtons, updateQuestButtons] = useState(initialQuestButtonsState);\n  const [ghostName, changeGhostName] = useState('');\n\n  const updateSelectedEvidences = (value, isActive) => {\n    const currentState = selectedEvidences;\n    if (isActive) {\n      currentState.push(value);\n      setSelectedEvidences(currentState);\n      updateButtons({ ...buttons, [value]: isActive });\n    } else {\n      remove(currentState, (el) => el === value);\n      setSelectedEvidences(currentState);\n      updateButtons({ ...buttons, [value]: isActive });\n    }\n\n    const filtered = filterGhostsByEvidences(ghosts, currentState);\n    filterGhosts(filtered);\n  };\n\n  const handleAnswersButton = (text, isActive) => {\n    updateButtons({ ...buttons, talksToEveryOne: isActive });\n  };\n\n  const handleQuestButton = (text, isActive) => {\n    updateQuestButtons({ ...questButtons, [text]: isActive });\n  };\n\n  const updateGhostName = (value) => {\n    changeGhostName(value);\n  };\n\n  const resetPicker = () => {\n    setSelectedEvidences([]);\n    updateButtons(initialButtonsState);\n    updateQuestButtons(initialQuestButtonsState);\n    changeGhostName('');\n    filterGhosts(ghosts);\n  };\n\n  const changePage = (newPage) => {\n    setPage(newPage);\n  };\n\n  const renderPage = () => {\n    switch (page) {\n      case 'picker':\n        return (\n          <Picker\n            changePage={changePage}\n            filteredGhosts={filteredGhosts}\n            selectedEvidences={selectedEvidences}\n            updateSelectedEvidences={updateSelectedEvidences}\n            buttonsState={buttons}\n            questButtonsState={questButtons}\n            ghostName={ghostName}\n            updateGhostName={updateGhostName}\n            handleAnswersButton={handleAnswersButton}\n            handleQuestButton={handleQuestButton}\n            resetPicker={resetPicker}\n          />\n        );\n      case 'questions':\n        return <Questions changePage={changePage} />;\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <ThemeProvider theme={theme}>\n      {renderPage()}\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App';\n\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}